[[{"id":"5e9ac28e7f42e50001223914","uuid":"625ec028-56b0-4b63-96cc-5f716465cc19","title":"A Link Content Previewer with Svelte & Sapper","slug":"a-link-content-previewer-with-svelte-sapper","html":"<p>Photo by <a href=\"https://unsplash.com/@jjying?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">JJ Ying</a> on <a href=\"https://unsplash.com/s/photos/link?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p>The inspiration for this post came from reading <a href=\"https://dev.to/ilonacodes\">Ilona</a>'s fantastic post on dev.to titled \"<a href=\"https://dev.to/ilonacodes/frontend-shorts-how-to-create-link-content-previewer-with-react-vue-and-vanilla-javascript-1pm1\">Frontend Shorts: How to create link content previewer with React, Vue, and Vanilla JavaScript</a>\". She did an amazing job explaining all the details, for VanillaJS, React and Vue. Please have a look at her post for full details.</p><p>In summary, she developed a feature that displays a content preview when a user moves their mouse over a link.</p><p>Below is an animated gif Ilona created to illustrate how this looks in practice:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2020/04/aukl8h6ktfl78xgehkt1.gif\" class=\"kg-image\" alt=\"Link content previewer in action\"><figcaption>Link content previewer in action</figcaption></figure><p>With all code in place as described in her post, the solution can be used as follows:</p><pre><code class=\"language-html\">&lt;a href=\"https://dev.to\"\n  onmouseover=\"showLinkPreview()\"\n  onmouseleave=\"hideLinkPreview()\"\n  class=\"link-with-preview\"\n  data-image=\"https://thepracticaldev.s3.amazonaws.com/i/6hqmcjaxbgbon8ydw93z.png\"\n  data-title=\"DEV Community üë©‚Äçüíªüë®‚Äçüíª\"\n  data-text=\"Where programmers share ideas and help each other grow‚ÄîA constructive and inclusive social network.\"\n&gt;\n  dev.to.\n&lt;/a&gt;</code></pre><h2 id=\"there-must-be-a-way-to-dynamically-create-the-preview-\">There must be a way to dynamically create the preview... ü§î</h2><p>This was my first thought when I read the blog post and looked at the source code. What if we fetched the link's <code>href</code> source in the <code>onmouseover</code> handler and dynamically set the title, text and image?</p><p>A sample Sapper application is available on my Github profile at <a href=\"https://github.com/mikenikles/sapper-link-preview\">https://github.com/mikenikles/sapper-link-preview</a>.</p><p>Shouldn't be too hard, eh? Use the browser's built-in <code>fetch</code> in the <code>onmouseover</code> handler, parse the returned HTML and look for the page's <code>&lt;title&gt;</code>, some sort of meta tag for the text and image.</p><p><strong>Note</strong>: Continue to read before you try this out ;-)</p><h3 id=\"-cross-origin-resource-sharing-cors-\">‚ùå Cross-Origin Resource Sharing (CORS)</h3><p>From the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">MDN web docs</a>:</p><blockquote>Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own.</blockquote><p>In other words, our website on https://domain-a.com can't easily fetch content from https://domain-b.com. However, the whole point of the link content previewer is to do exactly that.</p><h2 id=\"a-backend-service-to-the-rescue\">A backend service to the rescue</h2><p>Alright then, if we can't fetch the content on the client-side, let's do it on the backend. There's no CORS issues there and we can easily fetch any URL, parse its HTML and create the link preview.</p><h3 id=\"sapper-server-routes\">Sapper server routes</h3><p>In a <a href=\"https://sapper.svelte.dev/\">Sapper</a> application, we can use <a href=\"https://sapper.svelte.dev/docs#Server_routes\">server routes</a> to do the job for our link conten previewer.</p><p>All we need is the following server route at <code>src/routes/link-preview.json.js</code>:</p><pre><code class=\"language-js\">import got from \"got\";\nimport * as cheerio from \"cheerio\";\n\n// TODO: Expand to include other meta tags (e.g. Facebook, Twitter, etc.)\nconst getTitle = ($) =&gt; $(\"head title\").text()\nconst getDescription = ($) =&gt; $(\"meta[name=description]\").attr(\"content\")\nconst getImgSrc = ($) =&gt; $(\"meta[property='og:image']\").attr(\"content\")\n\nexport const get = async (req, res) =&gt; {\n  const { href } = req.query;\n  const fetchResponse = await got(href);\n  const $ = cheerio.load(fetchResponse.body);\n\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify({\n    title: getTitle($),\n    description: getDescription($),\n    imgSrc: getImgSrc($)\n  }));\n}</code></pre><p>It exports a <code>get</code> function, which maps to a GET request to <code>/link-preview.json</code>. Since that endpoints is served from the same domain as the frontend application, we have no CORS issues.</p><p>We need two libraries:</p><ul><li><code><a href=\"https://www.npmjs.com/package/got\">got</a></code>: A request library for Node.js</li><li><code><a href=\"https://www.npmjs.com/package/cheerio\">cheerio</a></code>: An implementation of core jQuery designed for the server</li></ul><p>In the <code>get</code> function, we first read the <code>href</code> request query parameter. The frontend can provide that when calling the endpoint with <code>/link-preview.json?href=https://dev.to</code>.</p><p>We send a GET request to that URL using <code>got</code>. Once the response comes back, we load the response body into <code>cheerio</code>, this helps us query the HTML in a way that's similar to how jQuery works.</p><p>Lastly, the <code>get</code> function returns a JSON object with the <code>title</code>, <code>description</code> and <code>imgSrc</code>, all read from the HTML.</p><p><strong>Note</strong>: As commented in the code, the <code>getTitle</code>, <code>getDescription</code> and <code>getImgSrc</code> functions can be extended at will to read different meta tags.</p><h3 id=\"test-the-backend-service\">Test the backend service</h3><p>In your Sapper project, run <code>npm install</code> and <code>npm run dev</code> to start the server. If you access <code>http://localhost:3000/link-preview.json?href=https://dev.to</code>, you'll see the JSON response as expected.</p><h2 id=\"create-a-linkpreview-svelte-component\">Create a &lt;LinkPreview&gt; Svelte component</h2><p>To use the above backend service, let's create a <code>&lt;LinkPreview&gt;</code> Svelte component. The goal is to end up with the following usage of this component:</p><blockquote><code>&lt;LinkPreview href=\"https://dev.to\"&gt;dev.to&lt;/LinkPreview&gt;</code></blockquote><p>Expressed as a <a href=\"https://en.wikipedia.org/wiki/User_story\">user story</a>:</p><blockquote>As a frontend developer,<br>I want to use the <code>&lt;LinkPreview&gt;</code> component the same way I would use an <code>&lt;a&gt;</code> tag,<br>so that I can leverage all supported <code>&lt;a&gt;</code> attributes.</blockquote><p>With these goals in mind, let's start with a new <code>src/components/link-preview.svelte</code> file:</p><pre><code class=\"language-html\">&lt;a href={$$props.href} {...$$props}&gt;\n  &lt;slot /&gt;\n&lt;/a&gt;</code></pre><p>This gives us a <code>&lt;LinkPreview&gt;</code> component that simply wraps an <code>&lt;a&gt;</code> tag and passes all props to the underlying <code>&lt;a&gt;</code> tag. For example, <code>&lt;LinkPreview href=\"https://dev.to\"&gt;dev.to&lt;/LinkPreview&gt;</code> renders as <code>&lt;a href=\"https://dev.to\"&gt;dev.to&lt;/a&gt;</code>.</p><h3 id=\"add-the-preview-card-to-display-the-link-content-preview\">Add the preview card to display the link content preview</h3><p>We could modify the existing <code>link-preview.svelte</code> component and add the HTML for the card and the <code>mouseover</code> and <code>mouseleave</code> event handlers. However, let's instead create a separate component for that to encapsulate the behavior and design.</p><p>Create a <code>src/components/link-preview-card.svelte</code> file with basic Svelte boilerplate, plus the card HTML and CSS Ilona provided in her blog post:</p><pre><code class=\"language-html\">&lt;script&gt;\n&lt;/script&gt;\n\n&lt;style&gt;\n  .card {\n    width: 150px;\n    font-size: 10px;\n    color: black;\n    position: absolute;\n    z-index: 100;\n    bottom: 30px;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .card img {\n    width: 150px;\n  }\n  .card-title {\n    font-size: 14px;\n  }\n&lt;/style&gt;\n\n&lt;div class=\"card\"&gt;\n  &lt;img src=\"\" class=\"card-img-top\"&gt;\n  &lt;div class=\"card-body\"&gt;\n    &lt;h5 class=\"card-title\"&gt;&lt;/h5&gt;\n    &lt;p class=\"card-text\"&gt;&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><p>Next, let's define the <code>title</code>, <code>description</code> and <code>imgSrc</code> variables. For now, they're empty, but we will soon use the backend service we created earlier to provide actual values. While we're at it, we also update the HTML to use the new variables.</p><pre><code class=\"language-html\">&lt;script&gt;\n  let title = \"\";\n  let description;\n  let imgSrc;\n&lt;/script&gt;\n\n&lt;style&gt;\n  ...\n&lt;/style&gt;\n\n&lt;div class=\"card\"&gt;\n  &lt;img src={imgSrc} alt={title} class=\"card-img-top\"&gt;\n  &lt;div class=\"card-body\"&gt;\n    &lt;h5 class=\"card-title\"&gt;{title}&lt;/h5&gt;\n    &lt;p class=\"card-text\"&gt;{description}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><p>With that skeleton in place, it's time to populate the three variables dynamically, based on the link's <code>href</code> attribute.</p><p>We start with Svelte's <code>onMount()</code> lifecycle method to call the backend service. What this means is that when the component gets mounted, we immediately call the backend service, which in turns fetches the <code>href</code>'s content and parses it. Once done, the preview card's values are populated so that by the time a user moves their mouse over a link, the preview card displays the content.</p><pre><code class=\"language-html\">&lt;script&gt;\n  import { onMount } from \"svelte\";\n  \n  export let href;\n  \n  ...\n  \n  onMount(() =&gt; {\n    fetch(\"/link-preview.json?href=\" + href)\n      .then(response =&gt; response.json())\n      .then(linkData =&gt; {\n        title = linkData.title;\n        description = linkData.description;\n        imgSrc = linkData.imgSrc;\n      });\n\t});\n&lt;/script&gt;</code></pre><p>You notice the new <code>href</code> prop we defined. We will pass that in when we use this component.</p><p>Now, the HTML needs a few updates for better user experience. Not every website provides the meta tags our backend service looks for. For now, we simply hide the parts that are missing.</p><pre><code class=\"language-html\">&lt;div class=\"card\"&gt;\n  {#if imgSrc}\n    &lt;img src={imgSrc} alt={title} class=\"card-img-top\"&gt;\n  {/if}\n  &lt;div class=\"card-body\"&gt;\n    &lt;h5 class=\"card-title\"&gt;{title}&lt;/h5&gt;\n    {#if description}\n      &lt;p class=\"card-text\"&gt;{description}&lt;/p&gt;\n    {/if}\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><p>To wrap up the development of this component, we need to indicate whether to show or hide this card. Remember, the preview card should only be displayed as long as the user's mouse is over a particular link. The only place we can determine that is in the already created <code>&lt;LinkPreview&gt;</code> component where the <code>&lt;a&gt;</code> tag is. So let's expose a <code>show</code> prop from the <code>&lt;LinkPreviewCard&gt;</code> component and wrap the entire HTML in an <code>if</code> statement.</p><pre><code class=\"language-html\">&lt;script&gt;\n  ...\n  \n  export href;\n  export show = false;\n  \n  ...\n&lt;/script&gt;\n\n{#if show}\n  &lt;div class=\"card\"&gt;\n    {#if imgSrc}\n  \t  &lt;img src={imgSrc} alt={title} class=\"card-img-top\"&gt;\n    {/if}\n    &lt;div class=\"card-body\"&gt;\n      &lt;h5 class=\"card-title\"&gt;{title}&lt;/h5&gt;\n      {#if description}\n        &lt;p class=\"card-text\"&gt;{description}&lt;/p&gt;\n      {/if}\n    &lt;/div&gt;\n  &lt;/div&gt;\n{/if}</code></pre><p>By default, the card is hidden (<code>export show = false;</code>).</p><h3 id=\"use-the-new-linkpreviewcard-component\">Use the new &lt;LinkPreviewCard&gt; component</h3><p>Back in the <code>src/components/link-preview.svelte</code> component, we need to import the new preview card component first and add it inside the <code>&lt;a&gt;</code> tag.</p><pre><code class=\"language-html\">&lt;script&gt;\n  import LinkPreviewCard from \"./link-preview-card.svelte\";\n&lt;/script&gt;\n\n&lt;a href={$$props.href} {...$$props}&gt;\n  &lt;slot /&gt;\n  &lt;LinkPreviewCard href={$$props.href} /&gt;\n&lt;/a&gt;</code></pre><p>The <code>href</code> prop we pass to the <code>&lt;LinkPreviewCard&gt;</code> component is the one we send to the backend service to fetch the preview content.</p><p>To properly style the preview card, the <code>&lt;a&gt;</code> tag needs a tiny bit of styling:</p><pre><code class=\"language-html\">&lt;style&gt;\n  a {\n    position: relative;\n  }\n&lt;/style&gt;</code></pre><h3 id=\"deal-with-the-mouseover-and-mouseleave-events\">Deal with the mouseover and mouseleave events</h3><p>Lastly, the preview card needs to be displayed when the mouse is over a link and hidden otherwise. We track this in a new variable:</p><pre><code class=\"language-html\">&lt;script&gt;\n  ...\n  \n  let showPreviewCard = false;\n&lt;/script&gt;</code></pre><p>Now, let's add the <code>mouseover</code> and <code>mouseleave</code> handlers and pass the <code>show</code> prop to the <code>&lt;LinkPreviewCard&gt;</code> component.</p><pre><code class=\"language-html\">&lt;a {href} {...$$restProps}\n  on:mouseover={() =&gt; showPreviewCard = true}\n  on:mouseleave={() =&gt; showPreviewCard = false}\n&gt;\n  &lt;slot /&gt;\n  &lt;LinkPreviewCard {href} show={showPreviewCard} /&gt;\n&lt;/a&gt;</code></pre><h2 id=\"use-the-linkpreview-component\">Use the &lt;LinkPreview&gt; component</h2><p>The <code>&lt;LinkPreview&gt;</code> component can now be used anywhere in the application, for example in <code>src/routes/index.svelte</code>:</p><pre><code class=\"language-html\">&lt;script&gt;\n  import LinkPreview from \"../components/link-preview.svelte\";\n&lt;/script&gt;\n\n&lt;p&gt;\n  Move your mouse over the following link to see a preview of the link's content:\n  &lt;LinkPreview href=\"https://dev.to\"&gt;dev.to.&lt;/LinkPreview&gt;\n&lt;/p&gt;</code></pre><h2 id=\"conclusion\">Conclusion</h2><p>Thanks to Ilona for posting the initial blog post on this topic!</p><p>As we saw in my addition, with a simple backend service, it is possible to load a link's preview dynamically. The benefit of that is an always up-to-date preview even when a website we link to changes their title, description or main image.</p><p>If you like this kind of content, make sure to follow me on Twitter <a href=\"https://twitter.com/mikenikles\">@mikenikles</a> to get notified of new blog posts.</p><h3 id=\"i-m-writing-a-book-cloud-native-web-development\">I'm writing a book, Cloud Native Web Development</h3><p>If you want to learn how to develop modern, cloud-native web applications end-to-end, please sign up for updates at <a href=\"https://gumroad.com/mikenikles\">https://gumroad.com/mikenikles</a>. I am currently writing a book with detailed instructions.</p>","comment_id":"5e9ac28e7f42e50001223914","feature_image":"https://assets.mikenikles.com/2020/04/jj-ying-PDxYfXVlK2M-unsplash.jpg","featured":false,"visibility":"public","created_at":"2020-04-18T09:04:14.000+00:00","updated_at":"2020-04-18T11:37:51.000+00:00","published_at":"2020-04-18T10:40:11.000+00:00","custom_excerpt":"Develop a <LinkPreview> Svelte component to display a link's content in a preview card.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"},{"id":"5e9ac36f7f42e5000122391c","name":"sapper","slug":"sapper","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/sapper/"},{"id":"5e04a3bbfe42360001093d91","name":"web","slug":"web","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/web/"},{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"}],"primary_tag":{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"},"url":"https://blog.mikenikles.com/a-link-content-previewer-with-svelte-sapper/","excerpt":"Develop a <LinkPreview> Svelte component to display a link's content in a preview card.","reading_time":8,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"A Link Content Previewer with Svelte & Sapper","meta_description":"Develop a <LinkPreview> Svelte component to display a link's content in a preview card."},{"id":"5e8384a803ef3d000187d5f9","uuid":"03ba011c-1653-4199-b837-7ed684ebc677","title":"Why I use a cloud-based development environment and how you can too","slug":"my-cloud-based-development-environm","html":"<p>Photo by myself, <a href=\"https://goo.gl/maps/tezxpewfmSGkNFme6\">Sulsseeli</a> in Switzerland</p><h2 id=\"cpu-memory-storage-on-a-laptop\">CPU, Memory &amp; Storage on a laptop</h2><p>I'm coming up to two decades since I started my career in software engineering and it's an understatement to say things have changed... üë¥</p><p>The choice of integrated development environments, or IDEs for short, as a junior software engineer were somewhat limited. I personally was too new to have an opinion and often used what co-workers used to develop Java applications - <a href=\"https://en.wikipedia.org/wiki/JBuilder\">Borland's JBuilder</a>.</p><p>You better had a beefy machine to run this thing smoothly üí™. Over the years, IDEs continued to be fairly CPU &amp; memory intensive. To support a more or less productive work style, it could result in purchasing a new laptop every two or three years.<br>In parallel, developing software required an increased storage capacity - initially because of <code>*.jar</code> file dependencies in the Java world and more recently due to <code>node_modules</code> directories that can quickly take up large amounts of disk space as illustrated in the following, academically absolutely correct (<em>not</em>) image:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2020/03/image.png\" class=\"kg-image\" alt=\"A comparison of the universe's heaviest objects\"><figcaption>A comparison of the universe's heaviest objects</figcaption></figure><p>This too led to a need to purchase better hardware. That all was fine \"back then\", but it's 2020 as of the time of this writing and I don't see a need to pay a lot of money to purchase a top-of-the-market laptop.</p><h2 id=\"-everything-is-in-the-\">‚òÅÔ∏è, ‚òÅÔ∏è, ‚òÅÔ∏è - Everything is in the ‚òÅÔ∏è</h2><p>As the software world embraced cloud environments to deploy and run applications, one aspect seemingly was forgotten... IDEs.</p><p>I'm a Chromebook user - have been for a year and a half and will continue to be (AMA if you're curious why)! While I can install <a href=\"https://code.visualstudio.com/\">VS Code</a> - my editor of choice - on a Chromebook thanks to its linux support, I couldn't find an answer to \"Why?\". Why would I develop locally when in the end, the applications I work on run in the cloud? Why would I want to carry my laptop everywhere I want to write code?</p><p>There have been solutions to run an IDE in the cloud for some time. I remember Cloud9, then experimented with <code><a href=\"https://github.com/cdr/code-server\">code-server</a></code> before I settled on <a href=\"https://www.gitpod.io/\">www.gitpod.io</a>.</p><blockquote><strong>Are You Ready-To-Code?</strong> Start Instantly. Anywhere.<br>Gitpod launches ready-to-code dev environments for your GitHub or GitLab project with a single click.</blockquote><p>Gitpod is based on the online IDE <a href=\"https://theia-ide.org/\">Theia</a>, which very recently <a href=\"https://dev.to/svenefftinge/theia-1-0-finally-a-good-browser-ide-3ok0\">launched version 1.0</a> üéâ!</p><h2 id=\"why-gitpod\">Why Gitpod?</h2><p>A core principle of mine is productivity. Anything I can automate, I automate. Anything I can get rid of, I get rid of. Anything I can outsource, I outsource. If I can drop my local development environment, I do so. As soon as you work in a team, all your effort of setting up a local development environment instantly multiplies by the number of team members. I'd much rather not have to deal with that for every new team member that joins and have them started with a fully functioning development environment within minutes. Who's worked in a team where the most recent developer who joins updates the \"Development environment setup\" wiki page only to find it outdated by the time the next team member joins? Be honest with yourself when you answer that üòâ.</p><p>Let's illustrate life without and with Gitpod:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2020/03/image-1.png\" class=\"kg-image\" alt=\"Development environment setup without Gitpod\"><figcaption>Development environment setup without Gitpod</figcaption></figure><p>Now the Gitpod marketing team's magic... That entire circle is irrelevant!</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2020/03/image-3.png\" class=\"kg-image\" alt=\"Development environment setup with Gitpod\"><figcaption>Development environment setup with Gitpod</figcaption></figure><p>Please read on if you're a skeptic by nature.</p><h3 id=\"a-url-to-start-the-development-environment\">A URL to start the development environment</h3><p>Here's how to get started with Gitpod and any Github or Gitlab repository - up and running with 0 clicks (but 1 press of the Enter key üòâ).</p><ol><li>Copy the Github or Gitlab URL of your preferred project.</li><li>Open a new tab in your browser.</li><li>Type \"gitpod.io/#\" and paste the URL from step 1. Hit Enter.</li></ol><p>Don't have your laptop? Want to quickly review code with a peer? The process is always the same.</p><h3 id=\"consistency\">Consistency</h3><p>If your project has special requirements, Gitpod provides <a href=\"https://www.gitpod.io/docs/config-docker/\">custom docker images</a>. Your existing team and every new team member or open source collaborator runs the same environment. No more \"it worked when I joined two weeks ago\".</p><h3 id=\"terminal\">Terminal</h3><p>A terminal is provided, based on the Docker image (see above).</p><h3 id=\"built-in-code-reviews\">Built-in code reviews</h3><p>This is a nifty feature I quite like. Just as you can prefix a Github or Gitlab project URL with <code>gitpod.io/#</code> to start the workspace, the same applies to a pull request URL. Look at diffs and leave comments right from within Gitpod. <a href=\"https://www.gitpod.io/docs/code-reviews/\">More on that in the documentation</a>.</p><h3 id=\"what-about-my-vs-code-extensions\">What about my VS Code extensions?</h3><p>That's <a href=\"https://www.gitpod.io/docs/vscode-extensions/\">supported</a> in beta. Once configured, extensions are installed automatically when a workspace is opened.</p><h2 id=\"oh-wait-it-costs-money-monthly-\">Oh wait... it costs money... monthly?!</h2><p>The overall feedback from my post reviewers was about Gitpod's monthly subscription fee, so it's worth I address that before I publish.</p><p>To start, there's a free (as in, the same cost as your local development IDE) version for open source projects that gives you 50 hours / month.</p><p>If you want access to private repos, you start with a 30 day free trial. After that, it's $9 / month for 100 hours of usage. If you need unlimited hours, it's $25 per month - that's less than $1 per day.</p><p>To put this into perspective: A 13-inch MacBook Pro costs $1,299. A Pixelbook Go costs $649 (or buy an even more inexpensive Chromebook). You save $650 and can invest it into an online IDE.<br>* Divided by $25 = 26 months<br>* Divided by 12 = <strong>2 years and 2 months</strong> </p><h2 id=\"look-out-for-\">Look out for...</h2><p>It's important to be fully transparent and list two gotchas that come to mind.</p><ul><li><strong>Online only</strong>: Yep, you need internet access to work on your code.</li><li><strong>Startup time</strong>: Yep, there's a startup time of a few seconds when you open a workspace. I've used Gitpod for a few weeks now and that never bothered me in the slightest. You may feel differently, but for me it's well worth all the benefits I get out of Gitpod.</li></ul><h2 id=\"summary\">Summary</h2><p>I most recently developed <a href=\"https://github.com/mikenikles/markua-docs-addon\">https://github.com/mikenikles/markua-docs-addon</a> entirely in Gitpod. The efficiency and convenience of this experience led me to write this post and to share my experience with a wider audience.</p><p>There is a lot more to how I work, reduce friction and increase productivity especially when it comes to web development. If you're interested, please head over to <a href=\"https://leanpub.com/cloud-native-web-development\">https://leanpub.com/cloud-native-web-development</a> and sign up for updates of my upcoming book, <strong>Cloud Native Web Development</strong>.</p><p>üëã</p>","comment_id":"5e8384a803ef3d000187d5f9","feature_image":"https://assets.mikenikles.com/2020/03/PANO_20190831_110915.vr.jpg","featured":false,"visibility":"public","created_at":"2020-03-31T17:58:00.000+00:00","updated_at":"2020-03-31T20:17:08.000+00:00","published_at":"2020-03-31T20:14:16.000+00:00","custom_excerpt":"JBuilder, Eclipse, WebStorm, Atom, VS Code - The evolution of my development IDEs before I moved to the cloud. Learn why I did and how you can too!","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},{"id":"5e83857003ef3d000187d605","name":"cloud","slug":"cloud","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/cloud/"}],"primary_tag":{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},"url":"https://blog.mikenikles.com/my-cloud-based-development-environm/","excerpt":"JBuilder, Eclipse, WebStorm, Atom, VS Code - The evolution of my development IDEs before I moved to the cloud. Learn why I did and how you can too!","reading_time":5,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":"Why I use a cloud-based development environment and how you can too","twitter_description":"JBuilder, Eclipse, WebStorm, Atom, VS Code - The evolution of my development IDEs before I moved to the cloud. Learn why I did and how you can too!","meta_title":null,"meta_description":"JBuilder, Eclipse, WebStorm, Atom, VS Code - The evolution of my development IDEs before I moved to the cloud. Learn why I did and how you can too!"},{"id":"5e7fc92bdc07db000198c5f6","uuid":"8ad42502-23b9-437d-abf7-aba7c39960e1","title":"How to use Svelte for your Google Docs add-on","slug":"how-to-use-svelte-for-your-google-docs-add-on","html":"<p>A screenshot of a Svelte app rendered in a Google Doc's add-on sidebar</p><h2 id=\"introduction\">Introduction</h2><p>I recently found myself in a situation where I needed a Google Docs add-on to help with authoring my upcoming book, <strong><a href=\"https://gumroad.com/mikenikles\">Cloud Native Web Development</a></strong>.</p><p>If you're not familiar with these add-ons, they are \"customized extensions of G Suite productivity applications such as Gmail, Google Sheets and Google Docs.\" You can learn more by reading <a href=\"https://developers.google.com/gsuite/add-ons/overview\">the official documentation</a>.</p><p>The application development platform used to develop add-ons is called <a href=\"https://developers.google.com/apps-script/overview\">Google Apps Script</a> and developers use JavaScript or, as you will see in this blog post, Typescript to write code.</p><h2 id=\"custom-sidebars\">Custom sidebars</h2><p>A feature that caught my attention is <a href=\"https://developers.google.com/apps-script/guides/dialogs#custom_sidebars\">custom sidebars</a>. Imagine you have a Google Docs document open - a custom sidebar would appear on the right-hand side of the screen.</p><p>Sidebars are HTML files styled with CSS and JavaScript is used to interact with the server-side code by leveraging an asynchronous client-side JavaScript API, <code>google.script.run</code>. A lot more details are available in the <a href=\"https://developers.google.com/apps-script/guides/html/communication\">documentation</a>.</p><h3 id=\"user-interface\">User interface</h3><p>While reading the documentation to familiarze myself with Apps Script and custom sidebars, I found a <a href=\"https://developers.google.com/gsuite/add-ons/editors/docs/quickstart/translate\">quickstart sample</a> that used jQuery and plain CSS. A good start for sure, but you wouldn't be reading this blog post if I had accepted that technology stack ;-).</p><p>I wondered... \"If it's HTML, CSS and JavaScript, there must be a way to use <a href=\"https://svelte.dev/\">Svelte</a>! ü§î\"</p><p>If you're curious why I prefer Svelte over React, please check out <a href=\"https://www.mikenikles.com/blog/why-i-moved-from-react-to-svelte-and-why-others-will-follow\">why I moved from React to Svelte</a>.</p><p>The default Svelte template provides a <code>build</code> NPM script that compiles Svelte components into static HTML pages. Let's see how we can take advantage of that.</p><h2 id=\"a-google-docs-add-on-svelte-template\">A Google Docs add-on Svelte template</h2><p>First things first: The template repository is available at <a href=\"https://github.com/mikenikles/google-docs-addon-svelte-template\">https://github.com/mikenikles/google-docs-addon-svelte-template</a>. You can simply clone this repository, follow the instructions in the <code>README</code> and you're up and running in no time. To learn about the steps I took, have a look at the <a href=\"https://github.com/mikenikles/google-docs-addon-svelte-template/pulls?q=is%3Apr+is%3Aclosed\">closed pull requests</a> or keep reading.</p><p>Secondly, remember at the beginning I said I needed a Google Docs add-on? If you're curious to see it all in action in a bigger project, please check out <a href=\"https://github.com/mikenikles/markua-docs-addon\">https://github.com/mikenikles/markua-docs-addon</a>.</p><h3 id=\"initialize-all-tooling-npm-clasp-\">Initialize all tooling (npm, clasp)</h3><p>Note: I recommend you clone my template above to get started and save yourself the following steps! This is mainly for the curious who want to understand what's going on.</p><p><a href=\"https://github.com/mikenikles/google-docs-addon-svelte-template/pull/1/files\">Files changed in pull request #1</a></p><ol><li>To start, let's create an empty folder and run <code>npm init</code> - use values of your choice to complete the wizard.</li><li>Next, we need two dev dependencies:</li></ol><pre><code class=\"language-sh\">npm i -D @google/clasp @types/google-apps-script\n</code></pre><p><code>clasp</code> is an <a href=\"https://github.com/google/clasp/\">open-source</a> tool, separate from the Apps Script platform, that lets you develop and manage Apps Script projects from your terminal rather than the Apps Script editor.<br>The Apps Script types assist with autocomplete in editors and I highly recommend you install them as it makes navigating the API much simpler.</p><ol><li>Also create a <code>src/index.ts</code> file, mainly a placeholder for now, with the following content:</li></ol><pre><code class=\"language-ts\">/**\n * @OnlyCurrentDoc\n */\n\nconst onOpen = (e) =&gt; {\n  DocumentApp.getUi().createAddonMenu()\n    .addItem(\"Show sidebar\", \"showSidebar\")\n    .addToUi();\n}\n\nconst onInstall = (e) =&gt; {\n  onOpen(e);\n}\n\nconst showSidebar = () =&gt; {\n  // TODO: Display the sidebar\n  Logger.log(\"TODO: Display the sidebar.\");\n}\n</code></pre><ol><li>Later when we deploy the add-on, we want to publish only what's absolutely necessary - which isn't much. Let's instruct <code>clasp</code> accordingly with a <code>.claspignore</code> file:</li></ol><pre><code>**/**\n!appsscript.json\n!src/**/**\n</code></pre><ol><li>Next up, create an <code>appsscript.json</code> file with information about the add-on:</li></ol><pre><code class=\"language-json\">{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"oauthScopes\": [\n    \"https://www.googleapis.com/auth/documents.currentonly\",\n    \"https://www.googleapis.com/auth/script.container.ui\"\n  ]\n} \n</code></pre><p>The two <code>oauthScopes</code> you see ask for permissions when users install the add-on. They're saying \"I the add-on promise to only access the current document and I would like to show you a UI (the custom sidebar)\".</p><ol><li>Lastly, a <code>.gitignore</code> file with <code>node_modules</code> as its content is a good idea ;-).</li></ol><h3 id=\"add-the-svelte-sidebar\">Add the Svelte sidebar</h3><p><a href=\"https://github.com/mikenikles/google-docs-addon-svelte-template/pull/2/files\">Files changed in pull request #2</a></p><p>This is the fun part where we add a Svelte application, a few NPM scripts to build the application and a workflow to use the compiled Svelte app in the add-on custom sidebar. Let's go!</p><ol><li>Create the Svelte application in the <code>sidebar</code> folder:</li></ol><pre><code class=\"language-sh\">npx degit sveltejs/template sidebar\ncd sidebar\nnpm install\nnpm run dev\n</code></pre><p>Standard Svelte commands as <a href=\"https://svelte.dev\">documented</a>. Once you verified the app runs, cancel the <code>npm run dev</code> command.</p><ol><li>Base styles will be provided by a Google-defined CSS file (more on that later), so we want to delete the <code>sidebar/public/global.css</code> file and remove its reference in the <code>sidebar/public/index.html</code> file.</li><li>It's time to automate a few steps with npm scripts. We need to <code>npm i -D npm-run-all</code> to simplify that. Next, add the following scripts to the root <code>package.json</code> file:</li></ol><pre><code class=\"language-json\">\"scripts:\" {\n  \"build\": \"rm -fr ./sidebar/public/build &amp;&amp; run-s build:ui build:ui:generate\",\n  \"build:ui\": \"cd ./sidebar &amp;&amp; npm run build\",\n  \"build:ui:generate\": \"run-p build:ui:generate:*\",\n  \"build:ui:generate:css\": \"echo '&lt;style&gt;' &gt; ./src/stylesheet.html &amp;&amp; cat ./sidebar/public/build/bundle.css &gt;&gt; ./src/stylesheet.html &amp;&amp; echo '&lt;/style&gt;' &gt;&gt; ./src/stylesheet.html\",\n  \"build:ui:generate:js\": \"echo '&lt;script&gt;' &gt; ./src/javascript.html &amp;&amp; cat ./sidebar/public/build/bundle.js &gt;&gt; ./src/javascript.html &amp;&amp; echo '&lt;/script&gt;' &gt;&gt; ./src/javascript.html\",\n}\n</code></pre><p>Alright... looks interesting... What's going on there?</p><ul><li><code>build</code>: Deletes old artifacts and kicks off two build processes, sequentially.</li><li><code>build:ui</code>: Changes directory to the <code>sidebar</code>, our Svelte app, and runs the <code>build</code> command defined in <code>sidebar/package.json</code>. This command compiles the Svelte app into static assets in <code>sidebar/public/build</code>.</li><li><code>build:ui:generate</code>: Uses <code>npm-run-all</code> to execute all <code>build:ui:generate:*</code> commands in parallel.</li><li><code>build:ui:generate:css</code>: Not as fancy as it looks, it basically writes a <code>src/stylesheet.html</code> that contains a <code>&lt;style&gt;</code> tag with the Svelte-generated CSS.</li><li><code>build:ui:generate:js</code>: The same as above for CSS, but this time for JavaScript.<br>With that, we now have a <code>src/stylesheet.html</code> and a <code>src/javascript.html</code> file which we need to load into the custom sidebar HTML.</li></ul><ol><li>Since these two files are generated, we don't want them in source control. The following two lines in <code>.gitignore</code> help with that:</li></ol><pre><code>src/javascript.html\nsrc/stylesheet.html\n</code></pre><ol><li>To create the <code>src/sidebar.html</code> file, we can start with the <code>sidebar/public/index.html</code> file. Copy its content to the new <code>src/sidebar.html</code> file.</li><li>Next, remove the stylesheet link and the script tag.</li><li>Before the closing <code>&lt;/head&gt;</code> tag, insert the following code to load the previously generated stylesheet file:</li></ol><pre><code>&lt;?!= include(\"src/stylesheet\"); ?&gt;\n</code></pre><ol><li>In the <code>&lt;body&gt;</code> tag, insert the following:</li></ol><pre><code>&lt;?!= include(\"src/javascript\"); ?&gt;\n</code></pre><ol><li>So close, we're almost done! Next up we need to look at that <code>include</code> function. It's something we add to <code>src/index.ts</code> and it's a simple one-liner:</li></ol><pre><code class=\"language-ts\">const include = (filename: string) =&gt; HtmlService.createHtmlOutputFromFile(filename).getContent();\n</code></pre><ol><li>Still in <code>src/index.ts</code>, it's time to update the <code>showSidebar</code> function to actually show the sidebar:</li></ol><pre><code class=\"language-ts\">const showSidebar = () =&gt; {\n  const ui = HtmlService.createTemplateFromFile('src/sidebar').evaluate().setTitle(\"My Svelte Sidebar\");\n  DocumentApp.getUi().showSidebar(ui);\n}\n</code></pre><p>With all that in place, <code>npm run build</code> now builds the sidebar Svelte app, copies the generated CSS and JS to HTML files we can include in the sidebar HTML used by the Google Docs add-on.</p><p>Next up: Deploy and test!</p><h2 id=\"create-an-apps-script-project-deploy-the-app\">Create an Apps Script project &amp; deploy the app</h2><p>As mentioned earlier, <code>clasp</code> is our tool of choice to interact with Google Apps script. Let's start with three convenience NPM scripts, added to the root <code>package.json</code> file:</p><pre><code class=\"language-json\">\"scripts\": {\n  \"clasp:create\": \"clasp create\",\n  \"clasp:login\": \"clasp login --no-localhost\",\n  \"clasp:open\": \"clasp open\",\n}\n</code></pre><p>They're all self-explanatory.</p><p>One note though, the <code>--no-localhost</code> flag is optional and only needed if your development environment is in the cloud. If you develop locally, you don't need that flag.</p><ol><li><code>npm run clasp:login</code> guides you through the process of authenticating with your Google account.</li><li><code>npm run clasp:create</code> creates a new Apps Script project. This also generates a <code>.clasp.json</code> file in your source code with the script ID.</li><li><code>npm run clasp:open</code> opens the project, this is useful once the add-on is deployed and you want to test it or look at logs.</li></ol><h3 id=\"deployment\">Deployment</h3><p>One more, absolutely last NPM script for today - I promise! Let's add the following to the root <code>package.json</code> file:</p><pre><code class=\"language-json\">\"scripts\": {\n  \"deploy\": \"run-s build &amp;&amp; clasp push\",\n}\n</code></pre><p>That's it. Run <code>npm run deploy</code> in your terminal, give it a moment and once completed, open the Apps Script project with <code>npm run clasp:open</code>.</p><h3 id=\"testing\">Testing</h3><p>Once you followed the steps above and have the Apps Script project open, the following steps explain how to test the add-on:</p><ol><li>Click <strong>Run</strong>, then <strong>Test as add-on...</strong></li><li>Click <strong>Select Doc</strong> and choose a document you want to use for testing.</li><li>Click <strong>Save</strong></li><li>In the <em>Execute Saved Test</em> section that appeared at the top, select your document and click <strong>Test</strong>.</li><li>With the document now open, navigate to <strong>Add-ons</strong> | <strong>[your-project-name]</strong> | <strong>Show sidebar</strong></li></ol><p>This opens the Svelte sidebar.</p><h2 id=\"optional-interact-with-the-google-doc-content\">Optional: Interact with the Google Doc content</h2><p>This is out of scope for this blog post, but the template contains an example of how a button in the sidebar can insert text into the document. Please refer to <a href=\"https://github.com/mikenikles/google-docs-addon-svelte-template/pull/3/files\">pull request #3</a> for details.</p><p>Please let me know what you think and if that's helpful. You can reach me on Twitter <a href=\"https://twitter.com/mikenikles\">@mikenikles</a>.</p>","comment_id":"5e7fc92bdc07db000198c5f6","feature_image":"https://assets.mikenikles.com/2020/03/google-docs-addon-svelte.png","featured":false,"visibility":"public","created_at":"2020-03-28T22:01:15.000+00:00","updated_at":"2020-04-23T08:19:24.000+00:00","published_at":"2020-03-28T22:09:25.000+00:00","custom_excerpt":"Develop Google Docs add-on sidebars with Svelte and Typescript.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"},{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"}],"primary_tag":{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"},"url":"https://blog.mikenikles.com/how-to-use-svelte-for-your-google-docs-add-on/","excerpt":"Develop Google Docs add-on sidebars with Svelte and Typescript.","reading_time":6,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"How to use Svelte for your Google Docs add-on","meta_description":"Develop Google Docs add-on sidebars with Svelte and Typescript."},{"id":"5e0cb08dfe42360001093dad","uuid":"1340df97-b80f-49e5-ba66-d15c24ffc3f3","title":"Add a commenting platform to a Svelte app","slug":"add-a-commenting-platform-to-a-svelte-app","html":"<p>Photo by <a href=\"https://unsplash.com/@artlasovsky?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Art Lasovsky</a> on <a href=\"https://unsplash.com/s/photos/writing?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p>Happy new year!</p><p>I recently <a href=\"https://www.mikenikles.com/blog/migrating-from-medium-to-my-own-blog\">relaunched</a> my personal blog at www.mikenikles.com using Svelte (<a href=\"https://www.mikenikles.com/blog/why-i-moved-from-react-to-svelte-and-why-others-will-follow\">learn why</a>).</p><p>Initial feedback was to allow visitors to leave comments and have discussions. I took that feedback and found www.commento.io which looked lightweight enough and straitforward to implement.</p><p>What I did:</p><ol><li>Sign up at www.commento.io</li><li>Create a Svelte component that displays comments</li></ol><p>The component is as simple as this (<a href=\"https://github.com/mikenikles/www-mikenikles-com/pull/4/files\">corresponding pull request</a>):</p><pre><code class=\"language-svelte\">&lt;svelte:head&gt;\n  &lt;script src=\"https://cdn.commento.io/js/commento.js\"&gt;&lt;/script&gt;\n&lt;/svelte:head&gt;\n\n&lt;h2&gt;Comments, Feedback, Thoughts&lt;/h2&gt;\n&lt;div id=\"commento\" /&gt;\n</code></pre><h2 id=\"configuration\">Configuration</h2><p>You can style the commenting platform by providing a <code>data-css-override</code> attribute to the <code>script</code> tag, for example:</p><pre><code class=\"language-html\">&lt;script src=\"https://cdn.commento.io/js/commento.js\" data-css-override=\"http://example.com/my-custom-styling.css\"&gt;&lt;/script&gt;</code></pre><p>Additional configuration options can be found in <a href=\"https://docs.commento.io/configuration/frontend/\">the documentation</a>.</p><p>Are there other alternatives you have experience with? What do you like / dislike about them?</p>","comment_id":"5e0cb08dfe42360001093dad","feature_image":"https://assets.mikenikles.com/2020/01/art-lasovsky-8XddFc6NkBY-unsplash.jpg","featured":false,"visibility":"public","created_at":"2020-01-01T14:45:33.000+00:00","updated_at":"2020-01-01T15:01:01.000+00:00","published_at":"2020-01-01T14:48:16.000+00:00","custom_excerpt":"A short intro on how to add a commenting platform to a Svelte app using commento.io.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5e04a3bbfe42360001093d91","name":"web","slug":"web","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/web/"},{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"}],"primary_tag":{"id":"5e04a3bbfe42360001093d91","name":"web","slug":"web","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/web/"},"url":"https://blog.mikenikles.com/add-a-commenting-platform-to-a-svelte-app/","excerpt":"A short intro on how to add a commenting platform to a Svelte app using commento.io.","reading_time":1,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Add a commenting platform to a Svelte app","meta_description":"A short intro on how to add a commenting platform to a Svelte app using commento.io."},{"id":"5e0210c7fe42360001093b3f","uuid":"ae9a0ae7-f181-4f1e-ade7-343d9276cf78","title":"Why I moved from React to Svelte and others will follow","slug":"why-i-moved-from-react-to-svelte-and-why-others-will-follow","html":"<p>Photo by <a href=\"https://unsplash.com/@wuzclicks?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Aryan Singh</a> on <a href=\"https://unsplash.com/s/photos/bird-migration?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><h2 id=\"react-was-my-go-to-choice-for-many-years\">React was my go-to choice for many years</h2><p>On October 14, 2015, I hosted the <a href=\"https://www.meetup.com/ReactJS-Vancouver-Meetup/events/225362860/\">inaugural React Vancouver meetup</a>. It was at a point were I had used React for the better part of the year and wanted to bring like-minded developers together.</p><p>React back then was, dare I say it, revolutionary in the web frontend world. Compared to the alternatives such as jQuery, Backbone.js or Angular 1.x, developing with React felt intuitive, refreshing and productive. Personally, the idea of isolated building blocks (aka components) really appealed to me as it naturally led to a structured, well organized and more maintainable code base.</p><p>Over the coming years, I kept a close eye on Angular 2.x+, Vue et al but none felt like a wortwhile choice to jump ship.</p><h2 id=\"then-i-learned-about-svelte\">Then I learned about Svelte</h2><p>I first learned about Svelte in mid 2018, almost a year before version 3.0 was released (see below). \"<a href=\"https://www.youtube.com/watch?v=qqt6YxAZoOc\">Computer, build me an app.</a>\" by <a href=\"https://twitter.com/Rich_Harris\">Rich Harris</a> is what got me hooked on Svelte.</p><blockquote>If you're not familiar with Svelte (<a href=\"https://svelte.dev/\">https://svelte.dev/</a>), please go to the website and spend 5 minutes reading the intro.</blockquote><p>Read it? Really? Excellent üëç</p><p>Once I watched the video, the main question in my mind was whether or not it's worth learning Svelte and starting to use it for new or even existing projects. In all fairness, Svelte impressed me but it still wasn't enough to embrace it fully.</p><h2 id=\"svelte-3-x\">Svelte 3.x</h2><p>April 22, 2019 - <a href=\"https://svelte.dev/blog/svelte-3-rethinking-reactivity\">Svelte 3: Rethinking reactivity</a> was the blog post I had been waiting for.</p><blockquote>Please take some time to read the blog post and <a href=\"https://www.youtube.com/watch?v=AdNJ3fydeao\">watch the video</a> - it's about spreadsheets but I promise it's fun üòâ</blockquote><p>Why was this such a big deal? For one, the Svelte team had been talking about version 3 quite a bit and I wanted to see it in action. On the other hand, Svelte and its promise excited me even more than React did when first I heard of it.</p><p>I mentored web developers at that time and had spent quite a bit of time bringing them up to speed on React. Things like JSX, CSS-in-JS, Redux, create-react-app, SSR and other concepts needed to be learned, understood and to a certain degree mastered in order to develop React apps.</p><blockquote><strong>None of that was necessary with Svelte.</strong></blockquote><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-svelte\">&lt;script&gt;\n  let name = 'world';\n&lt;/script&gt;\n\n&lt;style&gt;\n  h1 {\n    color: blue;\n  }\n&lt;/style&gt;\n\n&lt;h1&gt;Hello {name}!&lt;/h1&gt;</code></pre><figcaption>App.svelte</figcaption></figure><p>Simple enough? I agree. In fact, it is so simple I recommend it to my mentees who are new to web development.</p><h3 id=\"real-quick-what-s-going-on-in-that-code\">Real quick, what's going on in that code?</h3><p>The <code>script</code> tag is where the component's logic lives.</p><p>The <code>style</code> tag defines this component's CSS - none of this leaks outside the component, so we can safely use <code>h1</code> and it only applies to this component. It's real CSS, not a Javascript object that pretends to be CSS or a string literal that pretends to be CSS.</p><p>At the bottom is the component's HTML. Use variables with <code>{myVariable}</code>. Compared to React's JSX, Svelte allows you to use the correct HTML tags such as <code>for</code>, <code>class</code> instead of <code>forHtml</code> and <code>className</code>. See \"<a href=\"https://reactjs.org/docs/dom-elements.html#differences-in-attributes\">Differencs In Attributes</a>\" in the React documentation for a list of all attributes that are not standard HTML.</p><h2 id=\"let-s-rebuild-react-examples\">Let's rebuild React examples</h2><p>To give you an idea of what Svelte looks like compared to React, let's rebuild what's listed on <a href=\"https://reactjs.org/\">https://reactjs.org/</a>.</p><h3 id=\"a-simple-component\">A Simple Component</h3><p>See the code snippet above.</p><h3 id=\"a-stateful-component\">A Stateful Component</h3><p><a href=\"https://svelte.dev/repl/6e9ef214ae774287b21f902d7e6f0e68?version=3.16.6\">Interactive demo</a></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-svelte\">&lt;script&gt;\n  let seconds = 0;\n  setInterval(() =&gt; seconds += 1, 1000);\n&lt;/script&gt;\n\nSeconds: {seconds}</code></pre><figcaption>App.svelte</figcaption></figure><p>React: 33 lines<br>Svelte: 6 lines</p><h3 id=\"an-application\">An Application</h3><p><a href=\"https://svelte.dev/repl/817d413fd6c344bf859f0dbf8063de2f?version=3.16.6\">Interactive demo</a></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-svelte\">&lt;script&gt;\n  import TodoList from './TodoList.svelte';\n\t\n  let items = [];\n  let text = '';\n\t\n  const handleSubmit = () =&gt; {\n    if (!text.length) {\n      return\n    }\n    const newItem = {\n      text,\n      id: Date.now(),\n    };\n    items = items.concat(newItem);\n  }\n&lt;/script&gt;\n\n&lt;div&gt;\n  &lt;h3&gt;TODO&lt;/h3&gt;\n  &lt;TodoList {items} /&gt;\n  &lt;form on:submit|preventDefault={handleSubmit}&gt;\n    &lt;label for=\"new-todo\"&gt;\n      What needs to be done?\n    &lt;/label&gt;\n    &lt;input\n      id=\"new-todo\"\n      bind:value={text}\n      /&gt;\n    &lt;button&gt;\n      Add #{items.length + 1}\n    &lt;/button&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n</code></pre><figcaption>App.svelte</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-svelte\">&lt;script&gt;\n  export let items = [];\n&lt;/script&gt;\n\n&lt;ul&gt;\n  {#each items as item}\n    &lt;li key={item.id}&gt;{item.text}&lt;/li&gt;\n  {/each}\n&lt;/ul&gt;</code></pre><figcaption>TodoList.svelte</figcaption></figure><p>React: 66 lines<br>Svelte: 43 lines</p><h3 id=\"a-component-using-external-plugins\">A component Using External Plugins</h3><p><a href=\"https://svelte.dev/repl/28f4b2e36e4244b8b23cae3d584c4c88?version=3.16.6\">Interactive demo</a></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-svelte\">&lt;script&gt;\n  const md = new window.remarkable.Remarkable();\n  let value = 'Hello, **world**!';\n&lt;/script&gt;\n\n&lt;svelte:head&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/remarkable/2.0.0/remarkable.min.js\"&gt;&lt;/script&gt;\n&lt;/svelte:head&gt;\n\n&lt;div className=\"MarkdownEditor\"&gt;\n  &lt;h3&gt;Input&lt;/h3&gt;\n  &lt;label htmlFor=\"markdown-content\"&gt;\n    Enter some markdown\n  &lt;/label&gt;\n  &lt;textarea\n    id=\"markdown-content\"\n    bind:value={value}\n  /&gt;\n  &lt;h3&gt;Output&lt;/h3&gt;\n  &lt;div\n    className=\"content\"&gt;\n      {@html md.render(value)}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><figcaption>App.svelte</figcaption></figure><p>React: 42 lines<br>Svelte: 24 lines</p><blockquote>Less code = fewer bugs<br>Less code = better performance = better user experience<br>Less code = less maintenance = more time to develop features</blockquote><h2 id=\"what-else-do-i-like-about-svelte\">What else do I like about Svelte?</h2><h3 id=\"reactivity\">Reactivity</h3><p>Another powerful feature is <em><a href=\"https://svelte.dev/tutorial/reactive-declarations\">reactive declarations</a></em>. Let's start with an example:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-svelte\">&lt;script&gt;\n  let count = 0;\n  $: doubled = count * 2;\n\n  function handleClick() {\n    count += 1;\n  }\n&lt;/script&gt;\n\n&lt;button on:click={handleClick}&gt;\n  Clicked {count} {count === 1 ? 'time' : 'times'}\n&lt;/button&gt;\n\n&lt;p&gt;{count} doubled is {doubled}&lt;/p&gt;</code></pre><figcaption>Svelte's reactive declarations</figcaption></figure><p>Whenever you have variables that depend on other variables, declare them with <code>$: myVariable = [code that references other variables]</code>. Above, whenever <code>count</code> changes, <code>doubled</code> gets recalculated automatically and the UI updates to reflect the new value.</p><h3 id=\"stores\">Stores</h3><p>In cases where state needs to be shared across components, Svelte provides the concept of stores. <a href=\"https://svelte.dev/tutorial/auto-subscriptions\">The tutorial explains stores well</a>. No need to read lengthy tutorials - stores are that simple.</p><p><strong>Derived stores</strong></p><p>Often, one store depends on other stores. This is where Svelte provides <code>derived()</code> to combine stores. <a href=\"https://svelte.dev/tutorial/derived-stores\">See the tutorial for details</a>.</p><h3 id=\"await-as-a-logic-block\">Await as a logic block</h3><p>Alright, this one is a quite elegant. Let's start with the code (<a href=\"https://svelte.dev/repl/b9fc662a253443dc901ff189ce1cdd4b?version=3.16.7\">interactive demo</a>):</p><pre><code class=\"language-svelte\">&lt;script&gt;\n  let githubRepoInfoPromise;\n  let repoName = 'mikenikles/ghost-v3-google-cloud-storage';\n\n  const loadRepoInfo = async () =&gt; {\n    const response = await fetch(`https://api.github.com/repos/${repoName}`);\n    if (response.status === 200) {\n      return await response.json();\n    } else {\n      throw new Error(response.statusText);\n    }\n  }\n\t\n  const handleClick = () =&gt; {\n    githubRepoInfoPromise = loadRepoInfo();\n  }\n&lt;/script&gt;\n\n&lt;input type=\"text\" placeholder=\"user/repo\" bind:value={repoName} /&gt;\n&lt;button on:click={handleClick}&gt;\n  load Github repo info\n&lt;/button&gt;\n\n{#await githubRepoInfoPromise}\n  &lt;p&gt;...loading&lt;/p&gt;\n{:then apiResponse}\n  &lt;p&gt;{apiResponse ? `${apiResponse.full_name} is written in ${apiResponse.language}` : ''}&lt;/p&gt;\n{:catch error}\n  &lt;p style=\"color: red\"&gt;{error.message}&lt;/p&gt;\n{/await}</code></pre><p>See the <code>#await</code> block in the HTML? In a real-world application, you'd have a Loading component, an error component and the actual component to render the API response in this case. Try to enter an invalid repo name in the text box to trigger the error case.</p><h2 id=\"but-wait-what-about-\">\"But wait, what about...\"</h2><h3 id=\"open-source-components\">open source components?</h3><p>The main response I get when I introduce Svelte to someone is \"but what about the ecosystem, components, tutorials, tools, etc?\"</p><p>Yes, there are nowhere near as many open source Svelte components as there are components for React. Having said that though, how often do you take an open source React component and integrate it without any issues or unnecessary overhead? I'd argue many of us in the Javascript community have become too reliant on <code>npm install ...</code> to piece together a web application. Often building your own components, especially in Svelte, leads to less time spent overall. I have no data to proof that, it's base on my personal experience.</p><p>Related though, there is a growing list of Svelte components for anyone who sees comfort in reusing open source components.</p><h3 id=\"finding-a-job\">finding a job?</h3><p>Plenty of opportunities, see <a href=\"https://sveltejobs.dev/\">https://sveltejobs.dev/</a>. Apple's Fraud Engineering team is <a href=\"https://sveltejobs.dev/jobs/apple-senior-front-end-developer\">looking for a Svelte developer</a> (as of December 2019).</p><p>Also remember, the competition is much smaller compared to applying for a job that requires React, Vue, Angular, etc.</p><h2 id=\"and-then-there-s-sapper-to-deploy-svelte-apps\">And then, there's Sapper to deploy Svelte apps</h2><p>Developing an app is only a piece of the full cake - the app also needs to be deployed. For this, the Svelte team provides <a href=\"https://sapper.svelte.dev/\">Sapper</a>. That's an entire post in itself, so for now please have a look at the website for details.</p><h2 id=\"conclusion\">Conclusion</h2><p>That brings me to the second part of this blog's title, \"why others will follow.\" Every day, new web developers start their journey and the first thing many hit is an uncertainty of what to learn first. I say the future is about simplicity, quick time to market and I can't think of anything simpler and quicker than this:</p><pre><code class=\"language-svelte\">&lt;script&gt;\n  let name = 'world';\n&lt;/script&gt;\n\n&lt;style&gt;\n  h1 {\n    color: blue;\n  }\n&lt;/style&gt;\n\n&lt;h1&gt;Hello {name}!&lt;/h1&gt;</code></pre><p>Do hit me up on Twitter <a href=\"https://twitter.com/mikenikles/status/1210185500159594496\">@mikenikles</a> with your feedback.</p><p>üëã</p>","comment_id":"5e0210c7fe42360001093b3f","feature_image":"https://assets.mikenikles.com/2019/12/aryan-singh-vTBqLytx6SQ-unsplash-1.jpg","featured":true,"visibility":"public","created_at":"2019-12-24T13:21:11.000+00:00","updated_at":"2019-12-30T14:45:47.000+00:00","published_at":"2019-12-26T12:14:08.000+00:00","custom_excerpt":"A post about my React experience, why Svelte impressed me and code snippets to compare React with Svelte.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"},{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},{"id":"5e04a3bbfe42360001093d91","name":"web","slug":"web","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/web/"},{"id":"5e04a3bbfe42360001093d92","name":"react","slug":"react","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/react/"}],"primary_tag":{"id":"5e04a3bbfe42360001093d90","name":"svelte","slug":"svelte","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/svelte/"},"url":"https://blog.mikenikles.com/why-i-moved-from-react-to-svelte-and-why-others-will-follow/","excerpt":"A post about my React experience, why Svelte impressed me and code snippets to compare React with Svelte.","reading_time":6,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Why I moved from React to Svelte and others will follow","meta_description":"A post about my React experience, why Svelte impressed me and code snippets to compare React with Svelte."},{"id":"5dc85e97cd1bd400019e7cee","uuid":"13d86766-bfb9-41f3-a9c7-138caaa34110","title":"Migrating from Medium to my own blog","slug":"migrating-from-medium-to-my-own-blog","html":"<p>Photo by <a href=\"https://unsplash.com/@honza_kahanek?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jan Kah√°nek</a> on <a href=\"https://unsplash.com/s/photos/new-blog?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p><strong>Welcome to my personal blog üëã!</strong></p><p>I previously <a href=\"https://medium.com/@mikenikles\">published my blog posts on Medium</a>. A lot has already been said about why people migrate away from Medium (<a href=\"https://www.google.com/search?q=why+I+moved+away+from+medium\">search results</a>). With the changes rolled out in 2019, my visitor numbers dropped significantly and I started to look for an alternative where I can share my thoughts and experience to anyone who's interested.</p><figure class=\"kg-card kg-gallery-card kg-width-wide kg-card-hascaption\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/9-3.png\" width=\"1849\" height=\"937\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/8-3.png\" width=\"1831\" height=\"944\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/7-3.png\" width=\"1848\" height=\"935\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/6-3.png\" width=\"1841\" height=\"933\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/5-3.png\" width=\"1847\" height=\"946\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/4-3.png\" width=\"1861\" height=\"939\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/3-3.png\" width=\"1836\" height=\"930\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/2-3.png\" width=\"1848\" height=\"933\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/1-3.png\" width=\"1874\" height=\"934\"></div></div></div><figcaption>Medium stats March to November 2019</figcaption></figure><h2 id=\"where-is-this-blog-hosted\">Where is this blog hosted?</h2><p><strong>tl;dr</strong>: It's a self-hosted instance of <a href=\"https://ghost.org/\">Ghost</a> on <a href=\"https://cloud.google.com/\">Google Cloud Platform</a> with a static frontend developed with <a href=\"https://sapper.svelte.dev/\">Sapper</a>, <a href=\"https://svelte.dev/\">Svelte</a> &amp; <a href=\"https://tailwindcss.com/\">Tailwind CSS</a> deployed to <a href=\"https://firebase.google.com/\">Firebase</a>.</p><p>All source code is available <a href=\"https://github.com/mikenikles/www-mikenikles-com\">on Github</a>.</p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/ghost-gcp-firebase-hosting-4.png\" class=\"kg-image\" alt=\"This blog's architecture\"><figcaption>This blog's architecture</figcaption></figure><p>As part of my research, I looked at static site generators, SaaS solutions and - for a brief moment - considered spinning up my own very basic blogging platform. Luckily, I noticed how valuable time is and abandoned the self-developed blogging platform idea.</p><h3 id=\"ghost\">Ghost</h3><p>Long story short, I found <a href=\"https://ghost.org/\">www.ghost.org</a>. Their philosophy really closely aligns with my personal views and when I saw they offer an open source version, I was convinced.</p><p>The Ghost instance itself is deployed to <a href=\"https://cloud.google.com/run/\">Cloud Run</a> (1), which spins up a Ghost container when I access the admin URL.<br>Upon publishing a new blog post, its content is persisted in <a href=\"https://cloud.google.com/sql/docs/\">Cloud SQL</a> (2a) and any assets stored in <a href=\"https://cloud.google.com/storage/\">Cloud Storage</a> (2b). <a href=\"https://github.com/mikenikles/ghost-v3-google-cloud-storage\">I open-sourced the storage adapter</a>.</p><h3 id=\"static-website\">Static Website</h3><p>Once a blog post is published, I kick off a process (3) to fetch the blog content (4) with Ghost's <a href=\"https://ghost.org/docs/api/v3/content/\">Content API</a>, <a href=\"https://sapper.svelte.dev/docs#Exporting\">generate a static website</a> and deploy it to <a href=\"https://firebase.google.com/docs/hosting\">Firebase Hosting</a> (5).</p><p>The website is based on <a href=\"https://sapper.svelte.dev/\">Sapper</a> &amp; <a href=\"https://svelte.dev/\">Svelte</a> and styled with <a href=\"https://tailwindcss.com/\">Tailwind CSS</a>.</p><h2 id=\"nice-side-effect-i-don-t-need-the-database-at-runtime\">Nice side effect - I don't need the database at runtime</h2><p>That's true, since assets are stored on Cloud Storage and HTML, CSS and Javascript lives on Firebase Hosting, Ghost and its database are not accessed at runtime.</p>","comment_id":"5dc85e97cd1bd400019e7cee","feature_image":"https://assets.mikenikles.com/2019/12/jan-kahanek-fVUl6kzIvLg-unsplash.jpg","featured":true,"visibility":"public","created_at":"2019-11-10T19:01:43.000+00:00","updated_at":"2019-12-13T16:09:14.000+00:00","published_at":"2019-12-01T19:01:00.000+00:00","custom_excerpt":"How I moved to a self-hosted instance of Ghost on Google Cloud Platform with a static frontend developed with Sapper, Svelte & Tailwind CSS deployed to Firebase.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5de42bb7a587600001a6418b","name":"solution-architecture","slug":"solution-architecture","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/solution-architecture/"}],"primary_tag":{"id":"5de42bb7a587600001a6418b","name":"solution-architecture","slug":"solution-architecture","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/solution-architecture/"},"url":"https://blog.mikenikles.com/migrating-from-medium-to-my-own-blog/","excerpt":"How I moved to a self-hosted instance of Ghost on Google Cloud Platform with a static frontend developed with Sapper, Svelte & Tailwind CSS deployed to Firebase.","reading_time":2,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Migrating from Medium to my own blog","meta_description":"How I moved to self-hosted  Ghost on Google Cloud Platform with a static frontend developed with Sapper, Svelte & Tailwind CSS deployed to Firebase."},{"id":"5df64690311b020001459eb5","uuid":"95afae35-ca3b-463a-bb25-05384be93912","title":"Our approach to software development consistency","slug":"our-approach-to-software-development-consistency","html":"<p>Photo by <a href=\"https://unsplash.com/@priscilladupreez?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Priscilla Du Preez</a> on <a href=\"https://unsplash.com/s/photos/solid?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><h3 id=\"don-t-document-what-you-can-automate\">Don‚Äôt document what you can automate</h3><p><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform.</em></p><ul><li><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></li><li><em>Part 2: ‚ÄúOne vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up‚Äù</em></li><li><em>Part 3: ‚ÄúA (mostly) automated release process‚Äù</em></li><li><em>Part 4: ‚ÄúOur approach to software development consistency‚Äù</em></li></ul><h2 id=\"what-is-consistency-in-software-development\">What is consistency in software development?</h2><p>I see consistency as an integral part of successfully delivering software. Too often have I joined or worked with software teams that had little to no consistency.</p><p>It applies to all aspects of development: Code style, comments, tools, onboarding, creation of new services. It also extends to product management, defining and tracking tasks, and generally company processes.</p><p>Let‚Äôs take the ‚Äúcreation of new packages and services‚Äù case of my current project where we migrate from monolithical applications to smaller, independent and distributed services. Here‚Äôs how we created the first 3 services:</p><ul><li><strong><strong>Service 1</strong></strong>: 100% hand-crafted, trial &amp; error, many dead ends.</li><li><strong><strong>Service 2</strong></strong>: Copy &amp; paste service 1, tweak where necessary, replace old business logic with new one relevant to service 2. Repeat until hopefully everything somehow works.</li><li><strong><strong>Service 3</strong></strong>: Copy &amp; paste ‚Ä¶ <em><em>what on earth are we doing?</em></em></li></ul><p>Can you spot the consistency? Correct, <em><em>Copy &amp; paste</em></em> looks pretty consistent. What happens when people who spent a week building service 1 move on? Who knows what needs to be tweaked to create service 8? Imagine the nightmare when a fundamental bug occurs and impacts all services‚Ä¶ üëª.</p><p>Now the question is, how do we make this more consistent? I asked a few friends and many replied: <strong><strong>Document the process</strong></strong>.</p><ul><li><strong><strong>Service 1</strong></strong>: 100% hand-crafted, trial &amp; error, a few swear words here and there.</li><li><strong><strong><em><em>Document the process</em></em></strong></strong></li><li><strong><strong>Service 2</strong></strong>: Copy &amp; paste service 1, follow the documentation checklist to update the new service.</li><li><strong><strong>Service 3</strong></strong>: Follow the steps above, as long as nothing has changed and the documentation is still up-to-date ü§û.</li></ul><h2 id=\"don-t-document-what-you-can-automate-1\">Don‚Äôt document what you can automate</h2><p>As someone who‚Äôs spent more than half of his life in the software industry, I realized the simplest way to stay sane in this fast-moving environment is to write scripts that do the work for me.</p><p>Documentation is great, as long as it is accurate. There are situations where documentation is necessary, but for the use case we discuss in this blog post (creating new packages and services), documentation is the wrong approach.</p><p>Every new package or service has a certain shape that‚Äôs fairly similar among all others, like every house has some sort of foundation, some walls and windows and a roof.</p><p>Imagine the following procedure to create 3 services:</p><ul><li><strong><strong>Service 1</strong></strong>: Run service generator, provide service-specific values, hit Enter.</li><li><strong><strong>Service 2</strong></strong>: Run service generator, provide service-specific values, hit Enter.</li><li><strong><strong>Service 4</strong></strong>: Run service generator, provide service-specific values, hit Enter.</li></ul><h2 id=\"automate-the-process\">Automate the process</h2><p>Now let‚Äôs not only imagine the above procedure, let‚Äôs see how we achieved exactly that in our project.</p><p>To be transparent, we obviously had something like service 0 where we hand-crafted everything, tested the service, deployed, tweaked etc. However, we knew we want to automate this process so we paid close attention to that from the very beginning.</p><p>Our tool of choice is <a href=\"https://plopjs.com/\" rel=\"noopener nofollow\">Plop</a>. A popular alternative is <a href=\"http://yeoman.io/\" rel=\"noopener nofollow\">Yeoman</a>. We picked Plop for its simplicity and now that it supports <a href=\"https://plopjs.com/documentation/#addmany\" rel=\"noopener nofollow\">AddMany</a>, it provides all we need.</p><p>We currently have two generators:</p><ul><li>Package</li><li>Service</li></ul><p>All template files live in a <code>_templates</code> folder. The directory structure is:</p><pre><code>.\n‚îú‚îÄ‚îÄ _templates\n‚îÇ   ‚îú‚îÄ‚îÄ packages\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ iso\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ svr\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ web\n‚îÇ   ‚îî‚îÄ‚îÄ services\n‚îÇ       ‚îú‚îÄ‚îÄ README.md\n‚îÇ       ‚îú‚îÄ‚îÄ svr\n‚îÇ       ‚îî‚îÄ‚îÄ web\n‚îî‚îÄ‚îÄ scripts\n   ‚îî‚îÄ‚îÄ generators\n       ‚îú‚îÄ‚îÄ helpers.js\n       ‚îú‚îÄ‚îÄ index.js\n       ‚îú‚îÄ‚îÄ packages\n       ‚îÇ   ‚îî‚îÄ‚îÄ index.js\n       ‚îî‚îÄ‚îÄ services\n           ‚îî‚îÄ‚îÄ index.js</code></pre><p>The <code>README.md</code> template files exist once for packages and once for services. This ensures each package (and each service) follow the same structure. A <code>README.md</code> file contains the necessary information for anyone to contribute to a package or service.</p><p>Further down, the <code>generators</code> are defined. The generator entrypoint and the package generator look something like this:</p><pre><code class=\"language-javascript\">const {doSomething} = require('./helpers')\n\nmodule.exports = plop =&gt; {\n  plop.setGenerator('package', require('./packages/'))\n  plop.setGenerator('service', require('./services/'))\n  \n  // Helpers\n  plop.setHelper('myHelper', aParameter =&gt; doSomething(aParameter))\nava</code></pre><pre><code class=\"language-javascript\">const {PKG_TYPES, getFullPkgName, getPkgRoot, getType} = require('../helpers')\n\nconst validatePkgName = (newName, data) =&gt; {\n  try {\n    // validatePkgNamePattern(newName)\n    // validatePkgNameDoesNotExist(newName, data)\n  } catch (error) {\n    return error.message\n  }\n  return true\n}\n\nmodule.exports = {\n  description: 'Generate a new package (`iso-*`, `web-*`, etc.)',\n  prompts: [\n    {\n      type: 'list',\n      name: 'pkgTypeLabel',\n      message: 'What type of package would you like to create?',\n      choices: PKG_TYPES\n    },\n    {\n      type: 'input',\n      name: 'pkgName',\n      message:\n        'What is the name of your package? (E.g. \"logging\" or \"components-buttons\", etc.',\n      validate: validatePkgName\n    },\n    {\n      type: 'input',\n      name: 'pkgDescription',\n      message: 'What is the description of your package?'\n    }\n  ],\n  actions: data =&gt; {\n    const {pkgName, pkgTypeLabel} = data\n    const pkgType = getType(pkgTypeLabel)\n    const fullPkgName = getFullPkgName(pkgTypeLabel, pkgName)\n\n    return [\n      {\n        // Add the package template\n        type: 'addMany',\n        abortOnFail: true,\n        base: `../../_templates/packages/${pkgType}`,\n        destination: `../../${getPkgRoot(pkgType)}/${fullPkgName}/`,\n        templateFiles: `../../_templates/packages/${pkgType}/**/**`\n      },\n      {\n        // Add the README.md\n        type: 'add',\n        abortOnFail: true,\n        path: `../../${getPkgRoot(pkgType)}/${fullPkgName}/README.md`,\n        templateFile: `../../_templates/packages/README.md`\n      }\n    ]\n  }\n}</code></pre><p>The service generators are a bit more complex since they also take care of some additional service setup, such as <a href=\"https://cloud.google.com/deployment-manager/runtime-configurator/create-and-delete-runtimeconfig-resources#creating_a_config\" rel=\"noopener nofollow\">creating a RuntimeConfig resource in GCP</a>, <a href=\"https://api.slack.com/methods/channels.create\" rel=\"noopener nofollow\">creating a channel in Slack</a>, <a href=\"https://developer.atlassian.com/cloud/jira/platform/rest/#api-api-2-component-post\" rel=\"noopener nofollow\">adding a new component in Jira</a>, etc.</p><h2 id=\"conclusion\">Conclusion</h2><p>The generator can be nicely bundled into a NPM script in the repository‚Äôs root <code>package.json</code> like so:</p><pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"generate\": \"plop --plopfile ./scripts/generators/index.js\"\n  },\n  \"devDependencies\": {\n    \"plop\": \"^1.9.1\"\n  }\n}</code></pre><p>All it takes now to generate a new package is <code>yarn generate</code>. An interactive CLI then guides the developers through a few questions. A nice-to-have feature is the fact that you can pass the generator name as an argument, e.g. <code>yarn generate service</code> brings you right to the service-related questions.</p>","comment_id":"5df64690311b020001459eb5","feature_image":"https://assets.mikenikles.com/2019/12/priscilla-du-preez-6NSa9QoIqrE-unsplash.jpg","featured":false,"visibility":"public","created_at":"2019-12-15T14:43:28.000+00:00","updated_at":"2019-12-21T22:24:38.000+00:00","published_at":"2018-01-03T14:43:00.000+00:00","custom_excerpt":"Don't document what you can automate.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"}],"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/our-approach-to-software-development-consistency/","excerpt":"Don't document what you can automate.","reading_time":4,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Don't document what you can automate."},{"id":"5df64266311b020001459e5b","uuid":"e8aef96b-cd5e-4ca0-a5d3-f5443fe0ac9e","title":"A (mostly) automated release process","slug":"a-mostly-automated-release-process","html":"<p>Photo by <a href=\"https://unsplash.com/@agkdesign?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Alex Knight</a> on <a href=\"https://unsplash.com/s/photos/automation?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><h3 id=\"automate-whatever-you-can-automate-and-share-the-responsibility-for-the-remaining-tasks-\">Automate whatever you can automate and share the responsibility for the remaining tasks.</h3><p><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform.</em></p><ul><li><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></li><li><em>Part 2: ‚ÄúOne vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up‚Äù</em></li><li><em>Part 3: ‚ÄúA (mostly) automated release process‚Äù</em></li><li><em>Part 4: ‚ÄúOur approach to software development consistency‚Äù</em></li></ul><h2 id=\"what-is-a-release-process-\">What is a ‚Äúrelease process‚Äù?</h2><blockquote>Release management is the process of managing, planning, scheduling and controlling a software build through different stages and environments; including testing and deploying software releases.<br>Source: <a href=\"https://en.wikipedia.org/wiki/Release_management\" rel=\"noopener nofollow\">Wikipedia</a></blockquote><p>Woah‚Ä¶ That‚Äôs one long-a** sentence, it reminds me of German sentences I wrote in my essays when I grew up in üá®üá≠.</p><p>A slightly less verbose way of putting it:</p><blockquote>‚ÄúHow to get code from my laptop to production.‚Äù<br>Source: <a href=\"https://twitter.com/mikenikles\" rel=\"noopener nofollow\">Me</a></blockquote><p>In the end, it‚Äôs all about code and along the journey we want to do certain things to or with the code. Such as:</p><ul><li><a href=\"https://en.wikipedia.org/wiki/KISS_principle\" rel=\"noopener nofollow\">KISS</a>; tools like <a href=\"https://eslint.org/docs/about/\" rel=\"noopener nofollow\">ESLint</a> can help with that.</li><li>Keep consistent formatting. <a href=\"https://prettier.io/\" rel=\"noopener nofollow\">Prettier</a> is your must-have tool here.</li><li>Run tests.</li><li>Bundle reusable code into packages and deploy them to NPM.</li><li>Build services that leverage the aforementioned packages.</li><li>Give stakeholders a chance to review code in some more or less safe environment, often referred to as ‚Äústaging‚Äù.</li><li>Take that reviewed code and deploy it to where it really matters: ü•Å ‚Ä¶<br>the production environment üéâ</li></ul><h2 id=\"why-automated-\">Why ‚Äúautomated‚Äù?</h2><p>Great question, glad you asked. Mainly, because we can. More importantly though, most developers I know spend day after day writing code because they feel good when they release software that helps others (your mileage may vary). Rarely (never?) have I met passionate developers who say, ‚ÄúYou know, I simply love to manually ssh into my virtual machine, run <code>git pull</code>, then <code>sh ./scripts/release-carefully.sh --production=true</code> and hope for the best ü§û‚Äù.</p><p>As a rule of thumb,</p><blockquote>If a task can be automated in roughly the time it takes to execute it manually, automate it. Now.</blockquote><p>Here‚Äôs why: Passionate software engineers want to spend their time dealing with more important situations. Automating mundane tasks should be a priority for anyone in the software industry. Let‚Äôs do some math and see why:</p><ul><li>Manually deploying a new feature to your staging environment takes 21 minutes, give or take.</li><li>You do that once a day, five days a week.</li><li>Here‚Äôs the math: 21 minutes x 5 days per week = 105 minutes per week x 4 weeks = 420 minutes per month.</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_I2UEJj2yLfpeH734V8oT0A.png\" class=\"kg-image\" alt=\"420 minutes equal to 7 hours\"><figcaption>Source: <a href=\"https://www.google.ca/search?ei=5j4_Wv2MOpiajwOvjLz4CQ&amp;q=400+minutes+to+hours&amp;oq=400+minutes+to+hours&amp;gs_l=psy-ab.3..0j0i5i10i30k1j0i5i30k1j0i8i30k1l2.126360.126360.0.126726.1.1.0.0.0.0.176.176.0j1.1.0....0...1.1.64.psy-ab..0.1.175....0.Tsb9aXPHVHE\" rel=\"noopener nofollow\">Google</a></figcaption></figure><p>Seven hours per month is <strong><strong>1 full business day</strong></strong>. As an exercise for the reader, you could add the time it takes to deploy to production plus dealing with potential hotfix deployments.</p><p>Let‚Äôs say you end up with 2 to 3 business days as the grand total. Instead of spending that time month after month, invest it into writing automation scripts. In the second month, you‚Äôll have 2 to 3 extra business days where you can mentor a more junior team member or organize a lunch &amp; learn to share the ins and outs of your release automation script with the community in your city üôå.</p><h2 id=\"why-mostly-\">Why ‚Äúmostly‚Äù?</h2><p>I have yet to encounter a 100% automated release process for a software application. While this is certainly achievable for libraries, frameworks, etc., it is a different beast for an application.</p><p>At the very least, and this is what our goal at work was before we started automating the release process, an automated release requires two manual approvals:</p><ol><li>To deploy to staging.</li><li>To deploy to production.</li></ol><h2 id=\"so-here-s-how-we-release-our-services\">So‚Ä¶ Here‚Äôs how we release our services</h2><p>With the above in mind, the following diagram which I briefly mentioned in my first blog post of this series outlines our (mostly) automated release process:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://assets.mikenikles.com/2019/12/1_i8ySffq8oMkVGng82RkDlw--1-.png\" class=\"kg-image\" alt=\"A diagram of the release process on CircleCI\"></figure><p>As you can see, we use <a href=\"https://circleci.com/\" rel=\"noopener nofollow\">CircleCI</a>. With CircleCI 2.0 and <a href=\"https://circleci.com/docs/2.0/workflows/\" rel=\"noopener nofollow\">Workflows</a>, the above translates to the following <code><a href=\"https://circleci.com/docs/2.0/configuration-reference/\" rel=\"noopener nofollow\">.circleci/config.yml</a></code> file:</p><p><a href=\"https://gist.github.com/mikenikles/fca6250fab7d9e54ec70f5dd38a7dcaf.js\">https://gist.github.com/mikenikles/fca6250fab7d9e54ec70f5dd38a7dcaf.js</a></p><p>You notice 7 configured workflow jobs, they correspond to the 7 rectangles in the diagram above.</p><p>The <code>yarn deploy:*</code> scripts we call during the deployment jobs are thin wrappers around the Google Cloud Platform <code>gcloud</code> CLI. The scripts run some validation and a bit of logic to deal with the staging vs production situation.</p><p>This is all pretty new for us. It works well, but we always look at ways to speed up the process or simplify it. One next major step is to integrate a way to automatically create <code>CHANGELOG.md</code> files for each package / service and let the system determine the appropriate <a href=\"https://semver.org/\" rel=\"noopener nofollow\">semver</a> version when publishing to NPM. Something like <a href=\"https://conventionalcommits.org/\" rel=\"noopener nofollow\">https://conventionalcommits.org/</a> looks interesting ü§î.</p><h2 id=\"conclusion\">Conclusion</h2><p>It‚Äôs been a great journey with ups and downs, but the end result is something that makes our day to day life simple.</p><p>Starting in 2018, each microservice will have owners, a team of at least two developers. Being a service owner follows the ‚ÄúYou build it, you run it‚Äù principle. With the release process described in this blog post, each pull request gets deployed to production before it gets merged into <code>master</code>. The owners will be responsible not only for the development, but also for the service‚Äôs deployment, it‚Äôs monitoring and support.<br>Anyone at the company is free to open PRs in services they don‚Äôt own if there‚Äôs a bug. The service owners though <a href=\"https://help.github.com/articles/about-codeowners/\" rel=\"noopener nofollow\">will have the final word on approving PRs</a>.</p><p>Let me know if you have questions, thoughts, suggestions etc about the above approach. I‚Äôd love to discuss and learn how others deploy to production.</p>","comment_id":"5df64266311b020001459e5b","feature_image":"https://assets.mikenikles.com/2019/12/alex-knight-2EJCSULRwC8-unsplash.jpg","featured":false,"visibility":"public","created_at":"2019-12-15T14:25:42.000+00:00","updated_at":"2019-12-15T14:46:40.000+00:00","published_at":"2017-12-26T14:25:00.000+00:00","custom_excerpt":"Automate whatever you can automate and share the responsibility for the remaining tasks.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"}],"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/a-mostly-automated-release-process/","excerpt":"Automate whatever you can automate and share the responsibility for the remaining tasks.","reading_time":4,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Automate whatever you can automate and share the responsibility for the remaining tasks"},{"id":"5df63dff311b020001459dc5","uuid":"86ccc82e-82e2-4728-9e5d-26c99d1b9bc6","title":"One vs. many ‚Äî Why we moved from multiple git repos to a monorepo and how we set it up","slug":"one-vs-many-why-we-moved-from-multiple-git-repos-to-a-monorepo-and-how-we-set-it-up","html":"<p>Photo by <a href=\"https://unsplash.com/@skamenar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Steven Kamenar</a> on <a href=\"https://unsplash.com/s/photos/tree-in-forest?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p><em><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform</em>.</em></p><ul><li><em><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></em></li><li><em><em>Part 2: ‚ÄúOne vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up‚Äù</em></em></li><li><em><em>Part 3: ‚ÄúA (mostly) automated release process‚Äù</em></em></li><li><em><em>Part 4: ‚Äú</em></em>Our approach to software development consistency<em><em>‚Äù</em></em></li></ul><h2 id=\"multiple-repositories-means-multiple-everything\">Multiple repositories means multiple everything</h2><p>Let‚Äôs list some of the things we need to manage with a repository:</p><ul><li>Dependencies</li><li>Test configuration</li><li>Pull request templates</li><li>Pull requests / labels</li><li>ESLint</li><li>Prettier</li><li>Deployment and release scripts</li></ul><p>For some things, such as managing dependencies, services like <a href=\"https://greenkeeper.io/\" rel=\"noopener nofollow\">Greenkeeper</a> may help. However, if a dependency releases a new major version, you have to manually apply that to all repositories and run the tests.</p><p>It became clear that none of us enjoyed any of these maintenance tasks and we rather spend the time to make our market research chatbots more valuable to our customers.</p><h2 id=\"dependencies\">Dependencies</h2><h3 id=\"lerna\">Lerna</h3><p>Our code is mainly written in Javascript, which brought us to look at <a href=\"https://lerna.js.org/\" rel=\"noopener nofollow\">Lerna</a>.</p><blockquote>Lerna is a tool for managing JavaScript projects with multiple packages.</blockquote><p>We decided to take this one step further. Instead of managing our npm packages only, we configured Lerna to also manage our services, which live in the same monorepo.</p><p>Our monorepo directory structure is as follows:</p><pre><code class=\"language-bash\">.\n‚îú‚îÄ‚îÄ lerna.json\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ packages\n‚îî‚îÄ‚îÄ service</code></pre><p>The <code>lerna.json</code> file is straight forward:</p><pre><code class=\"language-json\">{\n  \"lerna\": \"2.4.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true, // See \"Yarn Workspaces\" below\n  \"packages\": [\"packages/*\", \"services/*\"],\n  \"version\": \"independent\"\n}</code></pre><p>With this configuration, our services can depend on packages and Lerna takes care of symlinking them. For example, we can run <code>yarn add package-z</code> within the <code>services/service-a</code> directory and lerna symlinks <code>package-z</code> properly. No more dealing with <code>yarn link</code>.</p><h3 id=\"npm-scoped-packages\">NPM scoped packages</h3><p>To Lerna, <code>packages/*</code> and <code>services/*</code> are considered packages. Most lerna commands support the <code>--scope</code> <a href=\"https://github.com/lerna/lerna#--scope-glob\" rel=\"noopener nofollow\">flag</a>, but that only works if you follow a strict naming convention for your <code>name</code> properties in the <code>package.json</code> files.</p><p>We decided to separate packages from services by using different <a href=\"https://docs.npmjs.com/misc/scope\" rel=\"noopener nofollow\">scoped packages</a>. Since <code>packages/*</code> get deployed to NPM, they use the company default scope (e.g. <code>@my-company</code>). Services in <code>services/*</code> use a <code>@my-company-services</code>scope. Packages and services are further prefixed with <code>web-*</code> vs <code>svr-*</code> to distinguish between different types of packages and services.</p><h3 id=\"yarn-workspaces\">Yarn Workspaces</h3><p>Lerna is great at managing inter-dependencies and running npm scripts or even arbitrary commands across all packages or subsets thereof.</p><p>However, each package and service by default gets their own <code>node_modules</code> folder. That is a lot of duplication‚Ä¶</p><p>The fine folks who give us Yarn released ‚ÄúWorkspaces‚Äù and kindly enough blogged how to use it with Lerna: <a href=\"https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/\" rel=\"noopener nofollow\">https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/</a></p><p>Besides the <code>\"useWorkspaces\": true</code> in the <code>lerna.json</code>, you also have to add <code>\"workspaces\": [\"packages/*\", \"services/*\"]</code> to your root <code>package.json</code> file. That‚Äôs it.</p><p>Now when you run <code>yarn</code> and <code>lerna bootstrap</code>, your root <code>node_modules</code> folder contains close to all npm packages you ever need. This saves both time and disk space. The following showcases the difference between not using Yarn Workspaces and using it in our monorepo. The stats are based on 20 packages managed by Lerna, run on a 2016 MacBook Pro.</p><p><strong>Without Yarn Workspaces</strong></p><pre><code>+-----------------+--------+\n|     Command     |  Time  |\n+-----------------+--------+\n| yarn install    | 13.23s |\n| lerna bootstrap | 72.33s |\n+-----------------+--------+</code></pre><p>This adds 96,112 files at a total of 666.4mb to disk.</p><p><strong><strong>With Yarn Workspaces</strong></strong></p><pre><code>+-----------------+--------+\n|     Command     |  Time  |\n+-----------------+--------+\n| yarn install    | 17.26s |\n| lerna bootstrap | 3.85s  |\n+-----------------+--------+</code></pre><p>This adds 32,008 files at a total of 267.1mb to disk.</p><p><strong>Conclusion</strong></p><p>Waiting an extra 4 seconds to install the root packages is worth the savings we get with <code>lerna bootstrap</code>. With a bit of caching on the continuous integration server, things look even better, but I‚Äôm getting ahead of myself.</p><h2 id=\"test-configuration\">Test Configuration</h2><p>We use <a href=\"http://facebook.github.io/jest/\" rel=\"noopener nofollow\">Jest</a>, but decided to let Lerna manage the test runner instances. (FYI, Jest comes with a <a href=\"https://facebook.github.io/jest/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner.html\" rel=\"noopener nofollow\">multi-project-runner</a> that may be useful in your use case.)</p><p>In our case, we like the <code>--scope</code> flag Lerna provides to run commands in certain directories only.<br>More importantly, we have a variety of packages and services, some can be used in Node.js, others in the browser and some are isomorphic.</p><p>To accommodate for that, we have the following Jest configuration setup:</p><pre><code>.\n‚îú‚îÄ‚îÄ jest.config.js\n‚îú‚îÄ‚îÄ packages\n‚îÇ   ‚îú‚îÄ‚îÄ iso-package\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jest.config.js\n‚îÇ   ‚îú‚îÄ‚îÄ svr-package\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jest.config.js\n‚îÇ   ‚îî‚îÄ‚îÄ web-package\n‚îÇ       ‚îî‚îÄ‚îÄ jest.config.js\n‚îú‚îÄ‚îÄ services\n‚îÇ   ‚îú‚îÄ‚îÄ svr-service\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jest.config.js\n‚îÇ   ‚îú‚îÄ‚îÄ web-service\n‚îÇ       ‚îî‚îÄ‚îÄ jest.config.js\n‚îî‚îÄ‚îÄ tests-setup\n    ‚îú‚îÄ‚îÄ polyfill.js\n    ‚îî‚îÄ‚îÄ setup.js</code></pre><p>The root-level <code>jest.config.js</code> contains the base Jest configuration we apply across all packages and services. It looks something like that:</p><pre><code>// jest.config.js\nmodule.exports = {\n  collectCoverageFrom: ['**/*.js'],\n  resetMocks: true,\n  verbose: true\n}</code></pre><h3 id=\"web-packages-and-services\">Web packages and services</h3><p>A <code>web-*</code> package or service uses the following <code>jest.config.js</code> within its root directory:</p><pre><code class=\"language-js\">// packages/web-*/jest.config.js or services/web-*/jest.config.js\nconst jestBase = require('../../jest.config.js')\nmodule.exports = {\n  ...jestBase,\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100\n    }\n  },\n  browser: true,\n  setupFiles: [\n    '&lt;rootDir&gt;/../../tests-setup/polyfill.js',\n    '&lt;rootDir&gt;/../../tests-setup/setup.js'\n  ]\n}</code></pre><h3 id=\"node-js-isomorphic-packages-and-services\">Node.js / isomorphic packages and services</h3><p>A <code>iso-*</code> or <code>svr-*</code> package or service uses the following <code>jest.config.js</code> within its root directory:</p><pre><code class=\"language-js\">const jestBase = require('../../jest.config.js')\nmodule.exports = {\n  ...jestBase,\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100\n    }\n  },\n  testEnvironment: 'node'\n}</code></pre><p>Notice how we configure the <code>coverageThreshold</code> on a per package / service level? This allows individual teams to set their own thresholds. Managing that per package / service is significantly simpler than at the monorepo root level.</p><h3 id=\"test-execution\">Test Execution</h3><p>The root <code>package.json</code> file contains a <code>\"test\": \"lerna exec yarn test\"</code> script. Each package and service has its own <code>test</code> script that simply invokes Jest: <code>\"test: jest\"</code>. The pattern applies to <code>test:coverage</code> as well.</p><p>We can now use Lerna‚Äôs <a href=\"https://github.com/lerna/lerna#flags\" rel=\"noopener nofollow\">flags</a> to do all sorts of nice things:</p><ul><li>Run tests for all services: <code>yarn test --scope @my-company-services/*</code>.</li><li>Run test coverage for all web packages: <code>yarn test:coverage --scope @my-company/web-*</code>.</li><li>Run tests for the <code>@my-company/iso-package</code> package and all packages and services that depend on it: <code>yarn test --scope @my-company/iso-package --include-filtered-dependencies</code>.</li></ul><p><strong>Why use lerna exec to execute a npm script when lerna run does exactly that?</strong></p><p>From what we encountered, <code>lerna run</code> swallows the output of the npm scripts. With the <code>--stream</code> flag, we get the output but it‚Äôs neither formatted nor does it have coloured console output.</p><h3 id=\"conclusion\">Conclusion</h3><p>While I could imagine Jest‚Äôs multi-project-runner to be more performant than our solution, we like Lerna‚Äôs powerful flags and decided to forgo Jest‚Äôs approach. This may very well change as more and more tests get added to the monorepo. (Happy to chat about that if anyone has some thoughts)</p><h2 id=\"eslint-prettier\">ESLint &amp; Prettier</h2><p>No special consideration was necessary. Simply add your config files to the repository root and it works as expected.</p><h2 id=\"pull-requests-templates-labels\">Pull requests, templates &amp; labels</h2><p>The pull request template is configured once in the <code>.github/PULL_REQUEST_TEMPLATE.md</code> file. It applies across all packages and services.</p><p>Compared to multiple repositories, managing pull requests in a monorepo requires a bit more thinking. At the time of this writing, we have not yet decided how we will deal with that. A few notes from initial discussions include:</p><ul><li>Use a labels with unique colours per package / service (we‚Äôll run out of distinguishable colours quickly though)</li><li>Use green labels for new features, red for bugs. Create green and red labels per package / service and add the package / service name as the label‚Äôs name.</li></ul><h2 id=\"conclusion-1\">Conclusion</h2><p>The benefits of a monorepo immediately were apparent to the team. Prior to that, we used <code>yarn link</code> to deal with a small SDK we use to integrate with the backend API. It works, if you‚Äôre careful and don‚Äôt deal with Docker as we do for our local development. Regardless though, it is still a mental burden on each individual developer who works on the SDK.</p><p>Getting everything configured took time, I am not going to sugarcoat that. Thanks to an amazing and curious team who showed patience throughout that transition period, we‚Äôre now in a place to spend more time building software rather than maintaining source repositories. Thank you!</p>","comment_id":"5df63dff311b020001459dc5","feature_image":"https://assets.mikenikles.com/2019/12/steven-kamenar-MMJx78V7xS8-unsplash-1.jpg","featured":false,"visibility":"public","created_at":"2019-12-15T14:06:55.000+00:00","updated_at":"2019-12-15T14:24:58.000+00:00","published_at":"2017-12-24T14:06:00.000+00:00","custom_excerpt":"Details of how and why we moved from multiple git repos to a monorepo.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"}],"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/one-vs-many-why-we-moved-from-multiple-git-repos-to-a-monorepo-and-how-we-set-it-up/","excerpt":"Details of how and why we moved from multiple git repos to a monorepo.","reading_time":5,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Details of how and why we moved from multiple git repos to a monorepo."},{"id":"5df63aef311b020001459d70","uuid":"775ec5be-5f19-429f-af56-8da0c4669c0d","title":"A monorepo, GitHub Flow and automation FTW","slug":"a-monorepo-github-flow-and-automation-ftw","html":"<p>Photo by <a href=\"https://unsplash.com/@perrygrone?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Perry Grone</a> on <a href=\"https://unsplash.com/s/photos/group?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><h2 id=\"how-our-production-deployments-went-from-to-a-piece-of-\">How our production deployments went from üôÄ to a piece of üç∞</h2><p><em><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform</em>.</em></p><ul><li><em><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></em></li><li><em><em>Part 2: ‚Äú</em></em><em><em>One vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up</em></em><em><em>‚Äù</em></em></li><li><em><em>Part 3: ‚Äú</em></em><em><em>A (mostly) automated release process</em></em><em><em>‚Äù</em></em></li><li><em><em>Part 4: ‚Äú</em></em>Our approach to software development consistency<em><em>‚Äù</em></em></li></ul><p>I think the simplest way to reduce risk in a new project is to stick to what you know. Sometimes though, it‚Äôs better to step outside your comfort zone in order to make progress.</p><h2 id=\"background-a-3-tier-architecture-\">Background (a 3-tier architecture)</h2><p>Earlier in 2017 when I joined a new startup to lead the engineering team, I stuck to what I knew. Quickly, it became apparent that a bit of discomfort and exploration is what we needed. First though, a note on what we do: We build chatbots for market researchers to engage with their communities. The high-level requirements were:</p><ul><li>an admin web interface to author, deploy and monitor chatbots</li><li>a backend system to deal with the business logic, validations and to process messages sent to the chatbots</li><li>a (relational) database to persist all data</li></ul><p>This screamed ‚Äú<a href=\"https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture\">3-tier architecture</a>‚Äù all over, so a 3-tier architecture we built.</p><h2 id=\"how-do-you-deploy-all-that-code\">How do you deploy all that code?</h2><p><em><em>Answer</em></em>: You stick to what you know. In my case, I previously used the <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Gitflow workflow</a>.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_J7M-iVWUK02MKEAXr7rzCQ.png\" class=\"kg-image\" alt=\"Gitflow Workflow\"><figcaption>Gitflow Workflow (Source: <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Atlassian</a>)</figcaption></figure><p>Every time a feature gets merged into the <code>develop</code> branch, the <code>develop</code> branch gets deployed to a staging environment.<br>Periodically (more on that in a moment), a <code>release</code> branch gets created off of the <code>develop</code> branch, reviewed and merged into <code>master</code>. As soon as that happens, <code>master</code> gets deployed to the production environment.</p><p>We had multiple git repositories (frontend, backend, jobs service for long-running tasks and a SDK to talk to the backend‚Äôs REST API). The Gitflow workflow applied to all repositories.</p><h3 id=\"so-what-does-periodically-mean\">So, what does ‚Äúperiodically‚Äù mean?</h3><p>This is where the Gitflow workflow becomes problematic. At what point in time do you cut a <code>release</code> branch? Every Monday morning at 9am? What if someone merges a feature into <code>develop</code> at 8:30am? Do you create a <code>release</code> branch on Monday at 9am, test the release branch thoroughly and merge the <code>release</code> branch into <code>master</code> on Wednesday / Thursday / ???. Who is responsible / accountable for the production deployment?</p><p>In the worst case, creating the <code>release</code> branch, testing it and merging to <code>master</code> is a tedious process. Before you know it, it‚Äôs been a month or more since you last released to production. üôÄ</p><p>We tried all sorts of approaches, experimented with more / less automation, etc.</p><h2 id=\"more-modularity-all-code-in-a-monorepo\">More modularity, all code in a monorepo</h2><p>As our struggle with the above approach increased, we gathered in front of a whiteboard and redefined how we want to deploy to production.</p><p>The main goal was to deploy to production much more frequently. In a best case scenario, we release each pull request to production as soon as it is tested in a staging environment.</p><p><em><em>Step One</em></em>: Bring all code into a monorepo to better deal with dependencies. (<em><em>This is worth its own blog post.</em></em>)</p><p><em><em>Step Two</em></em>: Get rid of the <code>develop</code> branch and only have a <code>master</code> and <code>feature</code> branches. Wait a minute‚Ä¶ That sounds familiar! Of course, it‚Äôs the <a href=\"https://guides.github.com/introduction/flow/\">GitHub Flow</a> üí°.</p><p><em><em>Step Three</em></em>: Automate, automate, automate! (<em><em>Worth another blog post‚Ä¶</em></em>)</p><p>Lots of whiteboarding, experimenting, and many failed deployments later, we now have a monorepo, follow the GitHub workflow and deploy to production multiple times per day.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_i8ySffq8oMkVGng82RkDlw.png\" class=\"kg-image\" alt=\"Release Process with a monorepo and the GitHub workflow\"><figcaption>Release Process with a monorepo and the GitHub workflow</figcaption></figure><p>The green rectangles are fully automated, the blue rectangles require manual approval in order for the workflow to continue.</p><h2 id=\"benefits\">Benefits</h2><p>With the above approach, we have a number of benefits:</p><ul><li>Deployments to production happen up to a few times per day. Each release is a fraction in size of what releases previously used to be.</li><li>The responsibility to deploy code to production is shared among all team members. In our case, the reviewer of a pull request deploys to staging and production.</li><li>With the GitHub flow approach, we have less branches to deal with and overall less process to get code released.</li></ul><p>In a follow-up post, I will share the CircleCI configuration and a few other tools that help us automate most of the release process.</p>","comment_id":"5df63aef311b020001459d70","feature_image":"https://assets.mikenikles.com/2019/12/perry-grone-lbLgFFlADrY-unsplash.jpg","featured":true,"visibility":"public","created_at":"2019-12-15T13:53:51.000+00:00","updated_at":"2019-12-15T14:05:46.000+00:00","published_at":"2017-12-22T13:53:00.000+00:00","custom_excerpt":"I think the simplest way to reduce risk in a new project is to stick to what you know. Sometimes though, it‚Äôs better to step outside your comfort zone in order to make progress.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},{"id":"5df63d69311b020001459db5","name":"github","slug":"github","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/github/"},{"id":"5df63d69311b020001459db6","name":"git","slug":"git","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/git/"},{"id":"5df63d69311b020001459db7","name":"automation","slug":"automation","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/automation/"},{"id":"5df63d69311b020001459db8","name":"release process","slug":"release-process","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/release-process/"}],"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/a-monorepo-github-flow-and-automation-ftw/","excerpt":"I think the simplest way to reduce risk in a new project is to stick to what you know. Sometimes though, it‚Äôs better to step outside your comfort zone in order to make progress.","reading_time":3,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"A monorepo, GitHub Flow and automation FTW","meta_description":"Our migration from monolithical applications deployed on AWS to a distributed services architecture (with a monorepo) deployed on Google Cloud Platform."},{"id":"5df63100311b020001459d02","uuid":"3456859c-d352-47fa-b85a-8bace6a164fa","title":"Ever wondered why your best employees leave?","slug":"ever-wondered-why-your-best-employees-leave","html":"<p>Take off your rose-coloured sunglasses and be excellent to your employees</p><p>At some point in my tech career, I worked at a company that did really well. So well in fact, they proudly displayed some of the world‚Äôs most well known logos under their ‚ÄúOur Customers‚Äù section on the website. The team increased from a dozen or so great engineers to a multitude of that, even beyond the engineering department. All in all, a picture-perfect startup success story. <em><em>Until‚Ä¶ there were bugs, servers crashed, excellent staff quit and customers didn‚Äôt renew contracts. </em></em>What happened?</p><hr><h2 id=\"the-early-days-when-you-wear-your-rose-coloured-glasses\">The early days, when you wear your rose-coloured glasses</h2><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_Xf-Dgg1tHl4e5WtgdxW8HQ-1.jpeg\" class=\"kg-image\" alt=\"Red, heart-shaped glasses\"><figcaption>Source: <a href=\"https://www.pinterest.com/pin/108649409739409722/\" rel=\"noopener nofollow\">https://www.pinterest.com/pin/108649409739409722/</a></figcaption></figure><p>You‚Äôve just started your business with your best pals, everybody works long hours, feature after feature gets released, customers love it.</p><p>Then there‚Äôs that first Fortune 100 customer in your portfolio. Holy moly, what just happened?There‚Äôs champagne, a party, maybe a company event to celebrate. Motivation across the entire team is at an all-time high.</p><p>You attend conferences, share your success, investors notice you. üí•, you land your series A funding. What‚Äôs next? You have commitments now, your investors have expectations and guess what, they are not going to accept a ‚Äúwe didn‚Äôt hit the milestone‚Äù at the next annual meeting. So, the company needs to expand, hire more developers because more developers leads to more features, which in turns leads to more success.</p><h3 id=\"or-so-you-thought-\">Or so you thought‚Ä¶</h3><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_J4kngZ79GrfEcCDPlJyCPg.jpeg\" class=\"kg-image\" alt=\"Broken glasses\"><figcaption>Source: <a href=\"http://www.truthdig.com/cartoon/item/rose-colored_glasses_20150105\" rel=\"noopener nofollow\">http://www.truthdig.com/cartoon/item/rose-colored_glasses_20150105</a></figcaption></figure><p>That company I worked at in a previous life was in that exact situation and, as many entrepreneurs would do too, they hired. Not one, not two, not ten new engineers. They went all out and tripled their team, geez I think it was even close to 4x.</p><p>A month passed, the office was buzzing. A few more months passed; still a great atmosphere and everybody was excited to ride on a success train.<br>Then, reality hit. It hit hard, but it hit the wrong people. Engineers, QA and configuration specialists (yeah, that exists) were among the first who started to raise awareness:</p><ul><li>Regression bugs</li><li>Repetitive work that could easily be automated if two teams collaborated</li><li>Major architectural issues</li><li>A lack of proper tools (never blame tools, unless they‚Äôre so bad, it really causes problems)</li><li>The list goes on, unfortunately</li></ul><p>These are just a few issues that slowly creeped upon us. Emails were sent, meetings arranged and soon, fingers were pointed. The once unbreakable team broke into pieces, silos formed and individuals turned into ‚Äúsurvival mode‚Äù.</p><h3 id=\"in-times-of-crisis-we-depend-on-leaders\">In times of crisis, we depend on leaders</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://assets.mikenikles.com/2019/12/1_qheKAMmp4RqNpBmTy-v-zA.jpeg\" class=\"kg-image\" alt=\"A mountain, with a boss on top and a leader half way up, helping many others climb the mountain\"></figure><p>So there we were, üí© hit the fan. Our system wasn‚Äôt scalable, it needed to be rebuilt, a task two guys worked on, gave their üëç and nobody questioned that decision. Why would we? They were senior.<br>Less than two weeks later, servers crashed. They were gone, unresponsive. 10k+ end users who relied on our product were left in the dark.</p><p>A fix was put in place, things went back to ‚Äúnormal‚Äù.</p><p>At this point, more team members realized the company had issues. Discussions, rumours, fear, stress, you name it. It spread like a wildfire from team to team.</p><blockquote>This is when leaders come into play.</blockquote><p>Unless, leaders are overwhelmed as well and try to calm the situation with positive words, but no actions. Repeatedly, employees were told that ‚Äú<em><em>we are in a difficult time, but we have a great team and do everything we can do improve the situation.</em></em>‚Äù</p><blockquote>Walk the walk, don‚Äôt talk the talk</blockquote><p>Talking the talk is easy, nobody needs to be a leader to do that.</p><h3 id=\"great-leaders-however-they-walk-the-walk\">Great leaders, however, they walk the walk</h3><p>Any leader of a business understands that no matter how awesome he or she is, it‚Äôs impossible to make decisions without consulting their team. By <em><em>team</em></em> I mean the people who work with the system on a daily basis, not the others on the management team.</p><p>That did not happen and within weeks, engineers across the organization quit and moved to companies where leaders are leaders, not bosses.</p><h2 id=\"how-to-keep-your-best-employees\">How to keep your best employees</h2><p>So much is to be said about that and so many factors have to be taken into consideration. In the end though, I think it all comes down to valuing your employees. It‚Äôs so simple, yet many companies don‚Äôt get it.</p><h3 id=\"perks-are-perks-they-re-not-a-differentiator-anymore\">Perks are perks, they‚Äôre not a differentiator anymore</h3><p>Perks such as working from home, an in-house barista, business trips, great salaries, a fancy office (definition of ‚Äúfancy‚Äù TBD), free alcohol, catered lunch, etc are not cutting it anymore. Many companies provide that and no matter how often the leadership tries to sell these perks, it is not a differentiator.<br>People who are burned out, repeatedly perform the same tasks day after day, raise awareness and suggest solutions but are not taken seriously, these people will leave. They deserve better and they know it!</p><h3 id=\"employees-don-t-work-for-you-you-work-for-them\">Employees don‚Äôt work for you, you work for them</h3><p>Why? Your regular employee is by far less attached to the company than founders and early-day hires. If you as a leader want your company to succeed, it is your responsibility to enable your team. Get out of your way to make sure your team has everything they need. Help them climb the mountain!</p><h3 id=\"in-short-treat-your-employees-well-that-s-it-\">In short, treat your employees well, that‚Äôs it!</h3><p>Seriously, that‚Äôs it. Listen to them, give them meaningful work and include them in the decision making process. I‚Äôm not saying include 100% of your staff at a 500 people-strong company when you work on the company‚Äôs strategy. What I‚Äôm saying is that decisions are made at every level in your hierarchy, so make sure people are included where it makes most sense.</p><p>By following that advice, you show you trust your teams. Decisions will be made based on what makes sense for the company, not the individual who is in survival mode.</p>","comment_id":"5df63100311b020001459d02","feature_image":"https://assets.mikenikles.com/2019/12/1_Xf-Dgg1tHl4e5WtgdxW8HQ.jpeg","featured":false,"visibility":"public","created_at":"2019-12-15T13:11:28.000+00:00","updated_at":"2019-12-15T13:28:38.000+00:00","published_at":"2016-04-11T13:11:00.000+00:00","custom_excerpt":"Thoughts on why top employees leave their jobs.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df62e46311b020001459ceb","name":"team","slug":"team","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/team/"},{"id":"5df63506311b020001459d62","name":"morale","slug":"morale","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/morale/"}],"primary_tag":{"id":"5df62e46311b020001459ceb","name":"team","slug":"team","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/team/"},"url":"https://blog.mikenikles.com/ever-wondered-why-your-best-employees-leave/","excerpt":"Thoughts on why top employees leave their jobs.","reading_time":4,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Ever wondered why your best employees leave?","meta_description":"Thoughts on why top employees leave their jobs."},{"id":"5df62d61311b020001459ce1","uuid":"20020e68-9440-4d00-91fb-62631f3a463e","title":"Code Reviews‚Ää‚Äî‚ÄäA developer‚Äôs #1 priority","slug":"code-reviews-a-developers-1-priority","html":"<p>Photo by <a href=\"https://unsplash.com/@nesabymakers?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">NESA by Makers</a> on <a href=\"https://unsplash.com/s/photos/code-review?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p>Plenty of articles have been published <a href=\"https://www.atlassian.com/agile/code-reviews\" rel=\"noopener nofollow\">here</a>, and <a href=\"http://guides.beanstalkapp.com/code-review/guide-to-code-review.html\" rel=\"noopener nofollow\">here</a>, and also <a href=\"http://glen.nu/ramblings/oncodereview.php\" rel=\"noopener nofollow\">here</a> as to why code reviews are great. I‚Äôm not going to repeat that. Instead, I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead.</p><hr><h2 id=\"overview\">Overview</h2><p>Often times, introducing a code review process to a software organization triggers a wide range of emotions among individuals.</p><p>There‚Äôs the ones who‚Äôve had positive experiences in the past. These are your supporters and for the sake of this article, we‚Äôll assume they‚Äôre on board and support the initiative.</p><p>Then, there‚Äôs the ones who‚Äôve either had negative experiences or no experiences at all. Let‚Äôs look at each role individually and see what might go through their mind and how we can implement a code review process that works well.</p><hr><h2 id=\"the-engineer-no-time-i-m-busy-writing-code-\">The engineer: ‚ÄúNo time, I‚Äôm busy writing code‚Äù</h2><h3 id=\"the-situation\">The situation</h3><p>Engineers are busy, very busy bees flying all over the code adding new features, fixing bugs, or taking care of technical debt.</p><h3 id=\"the-assumption\">The assumption</h3><p>Adding yet another task, reviewing someone else‚Äôs code, is simply too much to deal with. More tasks equals to less coding, hence fewer new features and fewer releases. Also, there‚Äôs less time to fix bugs or improve code quality.</p><h3 id=\"the-facts\">The facts</h3><p>When an engineer asks a team member for a code review, what she really asks for is a favour, a favour for someone else to learn about her code. This takes pressure off her shoulders because at least one other team member is able to answer questions or fix bugs related to that code.</p><p>Equally, if not more important though, she‚Äôs asking for another favour, a favour to get feedback on her code, to learn what other approaches might be possible, to improve her skills and become a more experienced developer.</p><p>Over time, this leads to better, more maintainable code that can be worked on by a number of people without the need for a so called ‚Äúknowledge transfer‚Äù. This topic is worth a post in itself‚Ä¶</p><p>The sooner someone‚Äôs code gets reviewed, the sooner that engineer can move on and work on new code, applying what she learned in her last code review and hence, write more solid code. Over time, code reviews will take minimal effort and help everyone to level up.</p><h2 id=\"the-project-manager-we-have-no-time-allocated-for-that-\">The project manager: ‚ÄúWe have no time allocated for that‚Äù</h2><h3 id=\"the-situation-1\">The situation</h3><p>None of the companies I‚Äôm aware of takes code reviews into account when estimating a project‚Äôs total effort.</p><h3 id=\"the-assumption-1\">The assumption</h3><p>Given that situation, it is a PM‚Äôs natural reaction to worry. To develop a feature, we suddenly require at least two engineers, more communication, more context switching and oh boy, there‚Äôs no budget for any of that.</p><h3 id=\"the-facts-1\">The facts</h3><p>As a project manager, there‚Äôs no need to worry. There‚Äôs not even a need to do anything about code reviews.</p><p>A well organized engineering team deals with code reviews so well, a project manager doesn‚Äôt even notice it‚Äôs happening.</p><p>What a project manager does notice in the long term though is the reduced number of bugs, fewer refactoring tasks and smaller technical debt.</p><hr><h2 id=\"how-to-roll-out-code-reviews\">How to roll out code reviews</h2><p>In order to implement a code review process that runs as smooth as butter, a few things have to happen:</p><h3 id=\"1-find-the-code-review-leads-\">1. Find the ‚Äúcode review leads‚Äù</h3><p>Most importantly, code reviews are not a ‚Äúone fits all‚Äù solution. Every company has their own tools and workflows already in place; code reviews are an extension of that.</p><p>What has worked well for me is to find ‚Äúcode review leads‚Äù, a group of engineers from each team. This ensures all varieties of workflows can be taken into account in the next step.</p><h3 id=\"2-define-the-process\">2. Define the process</h3><p>This phase is where the code review leads meet, discuss and document the code review process. What? Why? How?</p><p>Maybe a team or two trials the process and provides feedback before the next step.</p><h3 id=\"3-education\">3. Education</h3><p>It‚Äôs important to educate everyone. This includes engineers, QA and PMs. You could even consider to invite HR so they can update a job description‚Äôs ‚ÄúWhat you‚Äôll be doing‚Äù section and talk to candidates about code reviews.</p><h3 id=\"4-practise-and-refine\">4. Practise and refine</h3><p>Keep a recurring code review leads meeting for a while to check in with the group. If there are problems or new scenarios, discuss it and update the documentation accordingly.</p>","comment_id":"5df62d61311b020001459ce1","feature_image":"https://assets.mikenikles.com/2019/12/nesa-by-makers-kwzWjTnDPLk-unsplash.jpg","featured":false,"visibility":"public","created_at":"2019-12-15T12:56:01.000+00:00","updated_at":"2019-12-30T14:45:34.000+00:00","published_at":"2016-04-10T12:55:00.000+00:00","custom_excerpt":"I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},{"id":"5df62e46311b020001459ceb","name":"team","slug":"team","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/team/"}],"primary_tag":{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},"url":"https://blog.mikenikles.com/code-reviews-a-developers-1-priority/","excerpt":"I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead.","reading_time":3,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Code Reviews‚Ää‚Äî‚ÄäA developer‚Äôs #1 priority","meta_description":"I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead."}]]