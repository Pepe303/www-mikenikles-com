{"posts":[{"id":"5dc85e97cd1bd400019e7cee","uuid":"13d86766-bfb9-41f3-a9c7-138caaa34110","title":"Migrating from Medium to my own blog","slug":"migrating-from-medium-to-my-own-blog","html":"<p>Photo by <a href=\"https://unsplash.com/@honza_kahanek?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jan Kah√°nek</a> on <a href=\"https://unsplash.com/s/photos/new-blog?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p><strong>Welcome to my personal blog üëã!</strong></p><p>I previously <a href=\"https://medium.com/@mikenikles\">published my blog posts on Medium</a>. A lot has already been said about why people migrate away from Medium (<a href=\"https://www.google.com/search?q=why+I+moved+away+from+medium\">search results</a>). With the changes rolled out in 2019, my visitor numbers dropped significantly and I started to look for an alternative where I can share my thoughts and experience to anyone who's interested.</p><figure class=\"kg-card kg-gallery-card kg-width-wide kg-card-hascaption\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/9-3.png\" width=\"1849\" height=\"937\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/8-3.png\" width=\"1831\" height=\"944\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/7-3.png\" width=\"1848\" height=\"935\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/6-3.png\" width=\"1841\" height=\"933\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/5-3.png\" width=\"1847\" height=\"946\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/4-3.png\" width=\"1861\" height=\"939\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/3-3.png\" width=\"1836\" height=\"930\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/2-3.png\" width=\"1848\" height=\"933\"></div><div class=\"kg-gallery-image\"><img src=\"https://assets.mikenikles.com/2019/12/1-3.png\" width=\"1874\" height=\"934\"></div></div></div><figcaption>Medium stats March to November 2019</figcaption></figure><h2 id=\"where-is-this-blog-hosted\">Where is this blog hosted?</h2><p><strong>tl;dr</strong>: It's a self-hosted instance of <a href=\"https://ghost.org/\">Ghost</a> on <a href=\"https://cloud.google.com/\">Google Cloud Platform</a> with a static frontend developed with <a href=\"https://sapper.svelte.dev/\">Sapper</a>, <a href=\"https://svelte.dev/\">Svelte</a> &amp; <a href=\"https://tailwindcss.com/\">Tailwind CSS</a> deployed to <a href=\"https://firebase.google.com/\">Firebase</a>.</p><p>All source code is available <a href=\"https://github.com/mikenikles/www-mikenikles-com\">on Github</a>.</p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/ghost-gcp-firebase-hosting-4.png\" class=\"kg-image\" alt=\"This blog's architecture\"><figcaption>This blog's architecture</figcaption></figure><p>As part of my research, I looked at static site generators, SaaS solutions and - for a brief moment - considered spinning up my own very basic blogging platform. Luckily, I noticed how valuable time is and abandoned the self-developed blogging platform idea.</p><h3 id=\"ghost\">Ghost</h3><p>Long story short, I found <a href=\"https://ghost.org/\">www.ghost.org</a>. Their philosophy really closely aligns with my personal views and when I saw they offer an open source version, I was convinced.</p><p>The Ghost instance itself is deployed to <a href=\"https://cloud.google.com/run/\">Cloud Run</a> (1), which spins up a Ghost container when I access the admin URL.<br>Upon publishing a new blog post, its content is persisted in <a href=\"https://cloud.google.com/sql/docs/\">Cloud SQL</a> (2a) and any assets stored in <a href=\"https://cloud.google.com/storage/\">Cloud Storage</a> (2b). <a href=\"https://github.com/mikenikles/ghost-v3-google-cloud-storage\">I open-sourced the storage adapter</a>.</p><h3 id=\"static-website\">Static Website</h3><p>Once a blog post is published, I kick off a process (3) to fetch the blog content (4) with Ghost's <a href=\"https://ghost.org/docs/api/v3/content/\">Content API</a>, <a href=\"https://sapper.svelte.dev/docs#Exporting\">generate a static website</a> and deploy it to <a href=\"https://firebase.google.com/docs/hosting\">Firebase Hosting</a> (5).</p><p>The website is based on <a href=\"https://sapper.svelte.dev/\">Sapper</a> &amp; <a href=\"https://svelte.dev/\">Svelte</a> and styled with <a href=\"https://tailwindcss.com/\">Tailwind CSS</a>.</p><h2 id=\"nice-side-effect-i-don-t-need-the-database-at-runtime\">Nice side effect - I don't need the database at runtime</h2><p>That's true, since assets are stored on Cloud Storage and HTML, CSS and Javascript lives on Firebase Hosting, Ghost and its database are not accessed at runtime.</p>","comment_id":"5dc85e97cd1bd400019e7cee","feature_image":"https://assets.mikenikles.com/2019/12/jan-kahanek-fVUl6kzIvLg-unsplash.jpg","featured":true,"visibility":"public","created_at":"2019-11-10T19:01:43.000+00:00","updated_at":"2019-12-13T16:09:14.000+00:00","published_at":"2019-12-01T19:01:00.000+00:00","custom_excerpt":"How I moved to a self-hosted instance of Ghost on Google Cloud Platform with a static frontend developed with Sapper, Svelte & Tailwind CSS deployed to Firebase.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5de42bb7a587600001a6418b","name":"solution-architecture","slug":"solution-architecture","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/solution-architecture/"}],"authors":[{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"}],"primary_author":{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"},"primary_tag":{"id":"5de42bb7a587600001a6418b","name":"solution-architecture","slug":"solution-architecture","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/solution-architecture/"},"url":"https://blog.mikenikles.com/migrating-from-medium-to-my-own-blog/","excerpt":"How I moved to a self-hosted instance of Ghost on Google Cloud Platform with a static frontend developed with Sapper, Svelte & Tailwind CSS deployed to Firebase.","reading_time":2,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Migrating from Medium to my own blog","meta_description":"How I moved to self-hosted  Ghost on Google Cloud Platform with a static frontend developed with Sapper, Svelte & Tailwind CSS deployed to Firebase."},{"id":"5df64266311b020001459e5b","uuid":"e8aef96b-cd5e-4ca0-a5d3-f5443fe0ac9e","title":"A (mostly) automated release process","slug":"a-mostly-automated-release-process","html":"<p>Photo by <a href=\"https://unsplash.com/@agkdesign?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Alex Knight</a> on <a href=\"https://unsplash.com/s/photos/automation?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p><strong>Automate whatever you can automate and share the responsibility for the remaining tasks.</strong></p><p><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform.</em></p><ul><li><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></li><li><em>Part 2: ‚ÄúOne vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up‚Äù</em></li><li><em>Part 3: ‚ÄúA (mostly) automated release process‚Äù</em></li><li><em>Part 4: ‚ÄúOur approach to software development consistency‚Äù</em></li></ul><h2 id=\"what-is-a-release-process-\">What is a ‚Äúrelease process‚Äù?</h2><blockquote>Release management is the process of managing, planning, scheduling and controlling a software build through different stages and environments; including testing and deploying software releases.<br>Source: <a href=\"https://en.wikipedia.org/wiki/Release_management\" rel=\"noopener nofollow\">Wikipedia</a></blockquote><p>Woah‚Ä¶ That‚Äôs one long-a** sentence, it reminds me of German sentences I wrote in my essays when I grew up in üá®üá≠.</p><p>A slightly less verbose way of putting it:</p><blockquote>‚ÄúHow to get code from my laptop to production.‚Äù<br>Source: <a href=\"https://twitter.com/mikenikles\" rel=\"noopener nofollow\">Me</a></blockquote><p>In the end, it‚Äôs all about code and along the journey we want to do certain things to or with the code. Such as:</p><ul><li><a href=\"https://en.wikipedia.org/wiki/KISS_principle\" rel=\"noopener nofollow\">KISS</a>; tools like <a href=\"https://eslint.org/docs/about/\" rel=\"noopener nofollow\">ESLint</a> can help with that.</li><li>Keep consistent formatting. <a href=\"https://prettier.io/\" rel=\"noopener nofollow\">Prettier</a> is your must-have tool here.</li><li>Run tests.</li><li>Bundle reusable code into packages and deploy them to NPM.</li><li>Build services that leverage the aforementioned packages.</li><li>Give stakeholders a chance to review code in some more or less safe environment, often referred to as ‚Äústaging‚Äù.</li><li>Take that reviewed code and deploy it to where it really matters: ü•Å ‚Ä¶<br>the production environment üéâ</li></ul><h2 id=\"why-automated-\">Why ‚Äúautomated‚Äù?</h2><p>Great question, glad you asked. Mainly, because we can. More importantly though, most developers I know spend day after day writing code because they feel good when they release software that helps others (your mileage may vary). Rarely (never?) have I met passionate developers who say, ‚ÄúYou know, I simply love to manually ssh into my virtual machine, run <code>git pull</code>, then <code>sh ./scripts/release-carefully.sh --production=true</code> and hope for the best ü§û‚Äù.</p><p>As a rule of thumb,</p><blockquote>If a task can be automated in roughly the time it takes to execute it manually, automate it. Now.</blockquote><p>Here‚Äôs why: Passionate software engineers want to spend their time dealing with more important situations. Automating mundane tasks should be a priority for anyone in the software industry. Let‚Äôs do some math and see why:</p><ul><li>Manually deploying a new feature to your staging environment takes 21 minutes, give or take.</li><li>You do that once a day, five days a week.</li><li>Here‚Äôs the math: 21 minutes x 5 days per week = 105 minutes per week x 4 weeks = 420 minutes per month.</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_I2UEJj2yLfpeH734V8oT0A.png\" class=\"kg-image\" alt=\"420 minutes equal to 7 hours\"><figcaption>Source: <a href=\"https://www.google.ca/search?ei=5j4_Wv2MOpiajwOvjLz4CQ&amp;q=400+minutes+to+hours&amp;oq=400+minutes+to+hours&amp;gs_l=psy-ab.3..0j0i5i10i30k1j0i5i30k1j0i8i30k1l2.126360.126360.0.126726.1.1.0.0.0.0.176.176.0j1.1.0....0...1.1.64.psy-ab..0.1.175....0.Tsb9aXPHVHE\" rel=\"noopener nofollow\">Google</a></figcaption></figure><p>Seven hours per month is <strong><strong>1 full business day</strong></strong>. As an exercise for the reader, you could add the time it takes to deploy to production plus dealing with potential hotfix deployments.</p><p>Let‚Äôs say you end up with 2 to 3 business days as the grand total. Instead of spending that time month after month, invest it into writing automation scripts. In the second month, you‚Äôll have 2 to 3 extra business days where you can mentor a more junior team member or organize a lunch &amp; learn to share the ins and outs of your release automation script with the community in your city üôå.</p><h2 id=\"why-mostly-\">Why ‚Äúmostly‚Äù?</h2><p>I have yet to encounter a 100% automated release process for a software application. While this is certainly achievable for libraries, frameworks, etc., it is a different beast for an application.</p><p>At the very least, and this is what our goal at work was before we started automating the release process, an automated release requires two manual approvals:</p><ol><li>To deploy to staging.</li><li>To deploy to production.</li></ol><h2 id=\"so-here-s-how-we-release-our-services\">So‚Ä¶ Here‚Äôs how we release our services</h2><p>With the above in mind, the following diagram which I briefly mentioned in my first blog post of this series outlines our (mostly) automated release process:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://assets.mikenikles.com/2019/12/1_i8ySffq8oMkVGng82RkDlw--1-.png\" class=\"kg-image\" alt=\"A diagram of the release process on CircleCI\"></figure><p>As you can see, we use <a href=\"https://circleci.com/\" rel=\"noopener nofollow\">CircleCI</a>. With CircleCI 2.0 and <a href=\"https://circleci.com/docs/2.0/workflows/\" rel=\"noopener nofollow\">Workflows</a>, the above translates to the following <code><a href=\"https://circleci.com/docs/2.0/configuration-reference/\" rel=\"noopener nofollow\">.circleci/config.yml</a></code> file:</p><p><a href=\"https://gist.github.com/mikenikles/fca6250fab7d9e54ec70f5dd38a7dcaf.js\">https://gist.github.com/mikenikles/fca6250fab7d9e54ec70f5dd38a7dcaf.js</a></p><p>You notice 7 configured workflow jobs, they correspond to the 7 rectangles in the diagram above.</p><p>The <code>yarn deploy:*</code> scripts we call during the deployment jobs are thin wrappers around the Google Cloud Platform <code>gcloud</code> CLI. The scripts run some validation and a bit of logic to deal with the staging vs production situation.</p><p>This is all pretty new for us. It works well, but we always look at ways to speed up the process or simplify it. One next major step is to integrate a way to automatically create <code>CHANGELOG.md</code> files for each package / service and let the system determine the appropriate <a href=\"https://semver.org/\" rel=\"noopener nofollow\">semver</a> version when publishing to NPM. Something like <a href=\"https://conventionalcommits.org/\" rel=\"noopener nofollow\">https://conventionalcommits.org/</a> looks interesting ü§î.</p><h2 id=\"conclusion\">Conclusion</h2><p>It‚Äôs been a great journey with ups and downs, but the end result is something that makes our day to day life simple.</p><p>Starting in 2018, each microservice will have owners, a team of at least two developers. Being a service owner follows the ‚ÄúYou build it, you run it‚Äù principle. With the release process described in this blog post, each pull request gets deployed to production before it gets merged into <code>master</code>. The owners will be responsible not only for the development, but also for the service‚Äôs deployment, it‚Äôs monitoring and support.<br>Anyone at the company is free to open PRs in services they don‚Äôt own if there‚Äôs a bug. The service owners though <a href=\"https://help.github.com/articles/about-codeowners/\" rel=\"noopener nofollow\">will have the final word on approving PRs</a>.</p><p>Let me know if you have questions, thoughts, suggestions etc about the above approach. I‚Äôd love to discuss and learn how others deploy to production.</p>","comment_id":"5df64266311b020001459e5b","feature_image":"https://assets.mikenikles.com/2019/12/alex-knight-2EJCSULRwC8-unsplash.jpg","featured":false,"visibility":"public","created_at":"2019-12-15T14:25:42.000+00:00","updated_at":"2019-12-15T14:41:25.000+00:00","published_at":"2017-12-26T14:25:00.000+00:00","custom_excerpt":"Automate whatever you can automate and share the responsibility for the remaining tasks.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"}],"authors":[{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"}],"primary_author":{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"},"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/a-mostly-automated-release-process/","excerpt":"Automate whatever you can automate and share the responsibility for the remaining tasks.","reading_time":4,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Automate whatever you can automate and share the responsibility for the remaining tasks"},{"id":"5df63dff311b020001459dc5","uuid":"86ccc82e-82e2-4728-9e5d-26c99d1b9bc6","title":"One vs. many ‚Äî Why we moved from multiple git repos to a monorepo and how we set it up","slug":"one-vs-many-why-we-moved-from-multiple-git-repos-to-a-monorepo-and-how-we-set-it-up","html":"<p>Photo by <a href=\"https://unsplash.com/@skamenar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Steven Kamenar</a> on <a href=\"https://unsplash.com/s/photos/tree-in-forest?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p><em><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform</em>.</em></p><ul><li><em><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></em></li><li><em><em>Part 2: ‚ÄúOne vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up‚Äù</em></em></li><li><em><em>Part 3: ‚ÄúA (mostly) automated release process‚Äù</em></em></li><li><em><em>Part 4: ‚Äú</em></em>Our approach to software development consistency<em><em>‚Äù</em></em></li></ul><h2 id=\"multiple-repositories-means-multiple-everything\">Multiple repositories means multiple everything</h2><p>Let‚Äôs list some of the things we need to manage with a repository:</p><ul><li>Dependencies</li><li>Test configuration</li><li>Pull request templates</li><li>Pull requests / labels</li><li>ESLint</li><li>Prettier</li><li>Deployment and release scripts</li></ul><p>For some things, such as managing dependencies, services like <a href=\"https://greenkeeper.io/\" rel=\"noopener nofollow\">Greenkeeper</a> may help. However, if a dependency releases a new major version, you have to manually apply that to all repositories and run the tests.</p><p>It became clear that none of us enjoyed any of these maintenance tasks and we rather spend the time to make our market research chatbots more valuable to our customers.</p><h2 id=\"dependencies\">Dependencies</h2><h3 id=\"lerna\">Lerna</h3><p>Our code is mainly written in Javascript, which brought us to look at <a href=\"https://lerna.js.org/\" rel=\"noopener nofollow\">Lerna</a>.</p><blockquote>Lerna is a tool for managing JavaScript projects with multiple packages.</blockquote><p>We decided to take this one step further. Instead of managing our npm packages only, we configured Lerna to also manage our services, which live in the same monorepo.</p><p>Our monorepo directory structure is as follows:</p><pre><code class=\"language-bash\">.\n‚îú‚îÄ‚îÄ lerna.json\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ packages\n‚îî‚îÄ‚îÄ service</code></pre><p>The <code>lerna.json</code> file is straight forward:</p><pre><code class=\"language-json\">{\n  \"lerna\": \"2.4.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true, // See \"Yarn Workspaces\" below\n  \"packages\": [\"packages/*\", \"services/*\"],\n  \"version\": \"independent\"\n}</code></pre><p>With this configuration, our services can depend on packages and Lerna takes care of symlinking them. For example, we can run <code>yarn add package-z</code> within the <code>services/service-a</code> directory and lerna symlinks <code>package-z</code> properly. No more dealing with <code>yarn link</code>.</p><h3 id=\"npm-scoped-packages\">NPM scoped packages</h3><p>To Lerna, <code>packages/*</code> and <code>services/*</code> are considered packages. Most lerna commands support the <code>--scope</code> <a href=\"https://github.com/lerna/lerna#--scope-glob\" rel=\"noopener nofollow\">flag</a>, but that only works if you follow a strict naming convention for your <code>name</code> properties in the <code>package.json</code> files.</p><p>We decided to separate packages from services by using different <a href=\"https://docs.npmjs.com/misc/scope\" rel=\"noopener nofollow\">scoped packages</a>. Since <code>packages/*</code> get deployed to NPM, they use the company default scope (e.g. <code>@my-company</code>). Services in <code>services/*</code> use a <code>@my-company-services</code>scope. Packages and services are further prefixed with <code>web-*</code> vs <code>svr-*</code> to distinguish between different types of packages and services.</p><h3 id=\"yarn-workspaces\">Yarn Workspaces</h3><p>Lerna is great at managing inter-dependencies and running npm scripts or even arbitrary commands across all packages or subsets thereof.</p><p>However, each package and service by default gets their own <code>node_modules</code> folder. That is a lot of duplication‚Ä¶</p><p>The fine folks who give us Yarn released ‚ÄúWorkspaces‚Äù and kindly enough blogged how to use it with Lerna: <a href=\"https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/\" rel=\"noopener nofollow\">https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/</a></p><p>Besides the <code>\"useWorkspaces\": true</code> in the <code>lerna.json</code>, you also have to add <code>\"workspaces\": [\"packages/*\", \"services/*\"]</code> to your root <code>package.json</code> file. That‚Äôs it.</p><p>Now when you run <code>yarn</code> and <code>lerna bootstrap</code>, your root <code>node_modules</code> folder contains close to all npm packages you ever need. This saves both time and disk space. The following showcases the difference between not using Yarn Workspaces and using it in our monorepo. The stats are based on 20 packages managed by Lerna, run on a 2016 MacBook Pro.</p><p><strong>Without Yarn Workspaces</strong></p><pre><code>+-----------------+--------+\n|     Command     |  Time  |\n+-----------------+--------+\n| yarn install    | 13.23s |\n| lerna bootstrap | 72.33s |\n+-----------------+--------+</code></pre><p>This adds 96,112 files at a total of 666.4mb to disk.</p><p><strong><strong>With Yarn Workspaces</strong></strong></p><pre><code>+-----------------+--------+\n|     Command     |  Time  |\n+-----------------+--------+\n| yarn install    | 17.26s |\n| lerna bootstrap | 3.85s  |\n+-----------------+--------+</code></pre><p>This adds 32,008 files at a total of 267.1mb to disk.</p><p><strong>Conclusion</strong></p><p>Waiting an extra 4 seconds to install the root packages is worth the savings we get with <code>lerna bootstrap</code>. With a bit of caching on the continuous integration server, things look even better, but I‚Äôm getting ahead of myself.</p><h2 id=\"test-configuration\">Test Configuration</h2><p>We use <a href=\"http://facebook.github.io/jest/\" rel=\"noopener nofollow\">Jest</a>, but decided to let Lerna manage the test runner instances. (FYI, Jest comes with a <a href=\"https://facebook.github.io/jest/blog/2017/05/06/jest-20-delightful-testing-multi-project-runner.html\" rel=\"noopener nofollow\">multi-project-runner</a> that may be useful in your use case.)</p><p>In our case, we like the <code>--scope</code> flag Lerna provides to run commands in certain directories only.<br>More importantly, we have a variety of packages and services, some can be used in Node.js, others in the browser and some are isomorphic.</p><p>To accommodate for that, we have the following Jest configuration setup:</p><pre><code>.\n‚îú‚îÄ‚îÄ jest.config.js\n‚îú‚îÄ‚îÄ packages\n‚îÇ   ‚îú‚îÄ‚îÄ iso-package\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ jest.config.js\n‚îÇ   ‚îú‚îÄ‚îÄ svr-package\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jest.config.js\n‚îÇ   ‚îî‚îÄ‚îÄ web-package\n‚îÇ       ‚îî‚îÄ‚îÄ jest.config.js\n‚îú‚îÄ‚îÄ services\n‚îÇ   ‚îú‚îÄ‚îÄ svr-service\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jest.config.js\n‚îÇ   ‚îú‚îÄ‚îÄ web-service\n‚îÇ       ‚îî‚îÄ‚îÄ jest.config.js\n‚îî‚îÄ‚îÄ tests-setup\n    ‚îú‚îÄ‚îÄ polyfill.js\n    ‚îî‚îÄ‚îÄ setup.js</code></pre><p>The root-level <code>jest.config.js</code> contains the base Jest configuration we apply across all packages and services. It looks something like that:</p><pre><code>// jest.config.js\nmodule.exports = {\n  collectCoverageFrom: ['**/*.js'],\n  resetMocks: true,\n  verbose: true\n}</code></pre><h3 id=\"web-packages-and-services\">Web packages and services</h3><p>A <code>web-*</code> package or service uses the following <code>jest.config.js</code> within its root directory:</p><pre><code class=\"language-js\">// packages/web-*/jest.config.js or services/web-*/jest.config.js\nconst jestBase = require('../../jest.config.js')\nmodule.exports = {\n  ...jestBase,\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100\n    }\n  },\n  browser: true,\n  setupFiles: [\n    '&lt;rootDir&gt;/../../tests-setup/polyfill.js',\n    '&lt;rootDir&gt;/../../tests-setup/setup.js'\n  ]\n}</code></pre><h3 id=\"node-js-isomorphic-packages-and-services\">Node.js / isomorphic packages and services</h3><p>A <code>iso-*</code> or <code>svr-*</code> package or service uses the following <code>jest.config.js</code> within its root directory:</p><pre><code class=\"language-js\">const jestBase = require('../../jest.config.js')\nmodule.exports = {\n  ...jestBase,\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100\n    }\n  },\n  testEnvironment: 'node'\n}</code></pre><p>Notice how we configure the <code>coverageThreshold</code> on a per package / service level? This allows individual teams to set their own thresholds. Managing that per package / service is significantly simpler than at the monorepo root level.</p><h3 id=\"test-execution\">Test Execution</h3><p>The root <code>package.json</code> file contains a <code>\"test\": \"lerna exec yarn test\"</code> script. Each package and service has its own <code>test</code> script that simply invokes Jest: <code>\"test: jest\"</code>. The pattern applies to <code>test:coverage</code> as well.</p><p>We can now use Lerna‚Äôs <a href=\"https://github.com/lerna/lerna#flags\" rel=\"noopener nofollow\">flags</a> to do all sorts of nice things:</p><ul><li>Run tests for all services: <code>yarn test --scope @my-company-services/*</code>.</li><li>Run test coverage for all web packages: <code>yarn test:coverage --scope @my-company/web-*</code>.</li><li>Run tests for the <code>@my-company/iso-package</code> package and all packages and services that depend on it: <code>yarn test --scope @my-company/iso-package --include-filtered-dependencies</code>.</li></ul><p><strong>Why use lerna exec to execute a npm script when lerna run does exactly that?</strong></p><p>From what we encountered, <code>lerna run</code> swallows the output of the npm scripts. With the <code>--stream</code> flag, we get the output but it‚Äôs neither formatted nor does it have coloured console output.</p><h3 id=\"conclusion\">Conclusion</h3><p>While I could imagine Jest‚Äôs multi-project-runner to be more performant than our solution, we like Lerna‚Äôs powerful flags and decided to forgo Jest‚Äôs approach. This may very well change as more and more tests get added to the monorepo. (Happy to chat about that if anyone has some thoughts)</p><h2 id=\"eslint-prettier\">ESLint &amp; Prettier</h2><p>No special consideration was necessary. Simply add your config files to the repository root and it works as expected.</p><h2 id=\"pull-requests-templates-labels\">Pull requests, templates &amp; labels</h2><p>The pull request template is configured once in the <code>.github/PULL_REQUEST_TEMPLATE.md</code> file. It applies across all packages and services.</p><p>Compared to multiple repositories, managing pull requests in a monorepo requires a bit more thinking. At the time of this writing, we have not yet decided how we will deal with that. A few notes from initial discussions include:</p><ul><li>Use a labels with unique colours per package / service (we‚Äôll run out of distinguishable colours quickly though)</li><li>Use green labels for new features, red for bugs. Create green and red labels per package / service and add the package / service name as the label‚Äôs name.</li></ul><h2 id=\"conclusion-1\">Conclusion</h2><p>The benefits of a monorepo immediately were apparent to the team. Prior to that, we used <code>yarn link</code> to deal with a small SDK we use to integrate with the backend API. It works, if you‚Äôre careful and don‚Äôt deal with Docker as we do for our local development. Regardless though, it is still a mental burden on each individual developer who works on the SDK.</p><p>Getting everything configured took time, I am not going to sugarcoat that. Thanks to an amazing and curious team who showed patience throughout that transition period, we‚Äôre now in a place to spend more time building software rather than maintaining source repositories. Thank you!</p>","comment_id":"5df63dff311b020001459dc5","feature_image":"https://assets.mikenikles.com/2019/12/steven-kamenar-MMJx78V7xS8-unsplash-1.jpg","featured":false,"visibility":"public","created_at":"2019-12-15T14:06:55.000+00:00","updated_at":"2019-12-15T14:24:58.000+00:00","published_at":"2017-12-24T14:06:00.000+00:00","custom_excerpt":"Details of how and why we moved from multiple git repos to a monorepo.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"}],"authors":[{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"}],"primary_author":{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"},"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/one-vs-many-why-we-moved-from-multiple-git-repos-to-a-monorepo-and-how-we-set-it-up/","excerpt":"Details of how and why we moved from multiple git repos to a monorepo.","reading_time":5,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Details of how and why we moved from multiple git repos to a monorepo."},{"id":"5df63aef311b020001459d70","uuid":"775ec5be-5f19-429f-af56-8da0c4669c0d","title":"A monorepo, GitHub Flow and automation FTW","slug":"a-monorepo-github-flow-and-automation-ftw","html":"<p>Photo by <a href=\"https://unsplash.com/@perrygrone?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Perry Grone</a> on <a href=\"https://unsplash.com/s/photos/group?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><h2 id=\"how-our-production-deployments-went-from-to-a-piece-of-\">How our production deployments went from üôÄ to a piece of üç∞</h2><p><em><em>This blog post is part of a series where I share our migration from monolithical applications (each with their own source repository) deployed on AWS to a distributed services architecture (with all source code hosted in a monorepo) deployed on Google Cloud Platform</em>.</em></p><ul><li><em><em>Part 1 (this post): ‚ÄúA monorepo, GitHub Flow and automation FTW‚Äù</em></em></li><li><em><em>Part 2: ‚Äú</em></em><em><em>One vs. many‚Ää‚Äî‚ÄäWhy we moved from multiple git repos to a monorepo and how we set it up</em></em><em><em>‚Äù</em></em></li><li><em><em>Part 3: ‚Äú</em></em><em><em>A (mostly) automated release process</em></em><em><em>‚Äù</em></em></li><li><em><em>Part 4: ‚Äú</em></em>Our approach to software development consistency<em><em>‚Äù</em></em></li></ul><p>I think the simplest way to reduce risk in a new project is to stick to what you know. Sometimes though, it‚Äôs better to step outside your comfort zone in order to make progress.</p><h2 id=\"background-a-3-tier-architecture-\">Background (a 3-tier architecture)</h2><p>Earlier in 2017 when I joined a new startup to lead the engineering team, I stuck to what I knew. Quickly, it became apparent that a bit of discomfort and exploration is what we needed. First though, a note on what we do: We build chatbots for market researchers to engage with their communities. The high-level requirements were:</p><ul><li>an admin web interface to author, deploy and monitor chatbots</li><li>a backend system to deal with the business logic, validations and to process messages sent to the chatbots</li><li>a (relational) database to persist all data</li></ul><p>This screamed ‚Äú<a href=\"https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture\">3-tier architecture</a>‚Äù all over, so a 3-tier architecture we built.</p><h2 id=\"how-do-you-deploy-all-that-code\">How do you deploy all that code?</h2><p><em><em>Answer</em></em>: You stick to what you know. In my case, I previously used the <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Gitflow workflow</a>.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_J7M-iVWUK02MKEAXr7rzCQ.png\" class=\"kg-image\" alt=\"Gitflow Workflow\"><figcaption>Gitflow Workflow (Source: <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Atlassian</a>)</figcaption></figure><p>Every time a feature gets merged into the <code>develop</code> branch, the <code>develop</code> branch gets deployed to a staging environment.<br>Periodically (more on that in a moment), a <code>release</code> branch gets created off of the <code>develop</code> branch, reviewed and merged into <code>master</code>. As soon as that happens, <code>master</code> gets deployed to the production environment.</p><p>We had multiple git repositories (frontend, backend, jobs service for long-running tasks and a SDK to talk to the backend‚Äôs REST API). The Gitflow workflow applied to all repositories.</p><h3 id=\"so-what-does-periodically-mean\">So, what does ‚Äúperiodically‚Äù mean?</h3><p>This is where the Gitflow workflow becomes problematic. At what point in time do you cut a <code>release</code> branch? Every Monday morning at 9am? What if someone merges a feature into <code>develop</code> at 8:30am? Do you create a <code>release</code> branch on Monday at 9am, test the release branch thoroughly and merge the <code>release</code> branch into <code>master</code> on Wednesday / Thursday / ???. Who is responsible / accountable for the production deployment?</p><p>In the worst case, creating the <code>release</code> branch, testing it and merging to <code>master</code> is a tedious process. Before you know it, it‚Äôs been a month or more since you last released to production. üôÄ</p><p>We tried all sorts of approaches, experimented with more / less automation, etc.</p><h2 id=\"more-modularity-all-code-in-a-monorepo\">More modularity, all code in a monorepo</h2><p>As our struggle with the above approach increased, we gathered in front of a whiteboard and redefined how we want to deploy to production.</p><p>The main goal was to deploy to production much more frequently. In a best case scenario, we release each pull request to production as soon as it is tested in a staging environment.</p><p><em><em>Step One</em></em>: Bring all code into a monorepo to better deal with dependencies. (<em><em>This is worth its own blog post.</em></em>)</p><p><em><em>Step Two</em></em>: Get rid of the <code>develop</code> branch and only have a <code>master</code> and <code>feature</code> branches. Wait a minute‚Ä¶ That sounds familiar! Of course, it‚Äôs the <a href=\"https://guides.github.com/introduction/flow/\">GitHub Flow</a> üí°.</p><p><em><em>Step Three</em></em>: Automate, automate, automate! (<em><em>Worth another blog post‚Ä¶</em></em>)</p><p>Lots of whiteboarding, experimenting, and many failed deployments later, we now have a monorepo, follow the GitHub workflow and deploy to production multiple times per day.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_i8ySffq8oMkVGng82RkDlw.png\" class=\"kg-image\" alt=\"Release Process with a monorepo and the GitHub workflow\"><figcaption>Release Process with a monorepo and the GitHub workflow</figcaption></figure><p>The green rectangles are fully automated, the blue rectangles require manual approval in order for the workflow to continue.</p><h2 id=\"benefits\">Benefits</h2><p>With the above approach, we have a number of benefits:</p><ul><li>Deployments to production happen up to a few times per day. Each release is a fraction in size of what releases previously used to be.</li><li>The responsibility to deploy code to production is shared among all team members. In our case, the reviewer of a pull request deploys to staging and production.</li><li>With the GitHub flow approach, we have less branches to deal with and overall less process to get code released.</li></ul><p>In a follow-up post, I will share the CircleCI configuration and a few other tools that help us automate most of the release process.</p>","comment_id":"5df63aef311b020001459d70","feature_image":"https://assets.mikenikles.com/2019/12/perry-grone-lbLgFFlADrY-unsplash.jpg","featured":true,"visibility":"public","created_at":"2019-12-15T13:53:51.000+00:00","updated_at":"2019-12-15T14:05:46.000+00:00","published_at":"2017-12-22T13:53:00.000+00:00","custom_excerpt":"I think the simplest way to reduce risk in a new project is to stick to what you know. Sometimes though, it‚Äôs better to step outside your comfort zone in order to make progress.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},{"id":"5df63d69311b020001459db5","name":"github","slug":"github","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/github/"},{"id":"5df63d69311b020001459db6","name":"git","slug":"git","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/git/"},{"id":"5df63d69311b020001459db7","name":"automation","slug":"automation","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/automation/"},{"id":"5df63d69311b020001459db8","name":"release process","slug":"release-process","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/release-process/"}],"authors":[{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"}],"primary_author":{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"},"primary_tag":{"id":"5df63b89311b020001459d75","name":"series-monorepo","slug":"series-monorepo","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/series-monorepo/"},"url":"https://blog.mikenikles.com/a-monorepo-github-flow-and-automation-ftw/","excerpt":"I think the simplest way to reduce risk in a new project is to stick to what you know. Sometimes though, it‚Äôs better to step outside your comfort zone in order to make progress.","reading_time":3,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"A monorepo, GitHub Flow and automation FTW","meta_description":"Our migration from monolithical applications deployed on AWS to a distributed services architecture (with a monorepo) deployed on Google Cloud Platform."},{"id":"5df63100311b020001459d02","uuid":"3456859c-d352-47fa-b85a-8bace6a164fa","title":"Ever wondered why your best employees leave?","slug":"ever-wondered-why-your-best-employees-leave","html":"<p>Take off your rose-coloured sunglasses and be excellent to your employees</p><p>At some point in my tech career, I worked at a company that did really well. So well in fact, they proudly displayed some of the world‚Äôs most well known logos under their ‚ÄúOur Customers‚Äù section on the website. The team increased from a dozen or so great engineers to a multitude of that, even beyond the engineering department. All in all, a picture-perfect startup success story. <em><em>Until‚Ä¶ there were bugs, servers crashed, excellent staff quit and customers didn‚Äôt renew contracts. </em></em>What happened?</p><hr><h2 id=\"the-early-days-when-you-wear-your-rose-coloured-glasses\">The early days, when you wear your rose-coloured glasses</h2><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_Xf-Dgg1tHl4e5WtgdxW8HQ-1.jpeg\" class=\"kg-image\" alt=\"Red, heart-shaped glasses\"><figcaption>Source: <a href=\"https://www.pinterest.com/pin/108649409739409722/\" rel=\"noopener nofollow\">https://www.pinterest.com/pin/108649409739409722/</a></figcaption></figure><p>You‚Äôve just started your business with your best pals, everybody works long hours, feature after feature gets released, customers love it.</p><p>Then there‚Äôs that first Fortune 100 customer in your portfolio. Holy moly, what just happened?There‚Äôs champagne, a party, maybe a company event to celebrate. Motivation across the entire team is at an all-time high.</p><p>You attend conferences, share your success, investors notice you. üí•, you land your series A funding. What‚Äôs next? You have commitments now, your investors have expectations and guess what, they are not going to accept a ‚Äúwe didn‚Äôt hit the milestone‚Äù at the next annual meeting. So, the company needs to expand, hire more developers because more developers leads to more features, which in turns leads to more success.</p><h3 id=\"or-so-you-thought-\">Or so you thought‚Ä¶</h3><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://assets.mikenikles.com/2019/12/1_J4kngZ79GrfEcCDPlJyCPg.jpeg\" class=\"kg-image\" alt=\"Broken glasses\"><figcaption>Source: <a href=\"http://www.truthdig.com/cartoon/item/rose-colored_glasses_20150105\" rel=\"noopener nofollow\">http://www.truthdig.com/cartoon/item/rose-colored_glasses_20150105</a></figcaption></figure><p>That company I worked at in a previous life was in that exact situation and, as many entrepreneurs would do too, they hired. Not one, not two, not ten new engineers. They went all out and tripled their team, geez I think it was even close to 4x.</p><p>A month passed, the office was buzzing. A few more months passed; still a great atmosphere and everybody was excited to ride on a success train.<br>Then, reality hit. It hit hard, but it hit the wrong people. Engineers, QA and configuration specialists (yeah, that exists) were among the first who started to raise awareness:</p><ul><li>Regression bugs</li><li>Repetitive work that could easily be automated if two teams collaborated</li><li>Major architectural issues</li><li>A lack of proper tools (never blame tools, unless they‚Äôre so bad, it really causes problems)</li><li>The list goes on, unfortunately</li></ul><p>These are just a few issues that slowly creeped upon us. Emails were sent, meetings arranged and soon, fingers were pointed. The once unbreakable team broke into pieces, silos formed and individuals turned into ‚Äúsurvival mode‚Äù.</p><h3 id=\"in-times-of-crisis-we-depend-on-leaders\">In times of crisis, we depend on leaders</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://assets.mikenikles.com/2019/12/1_qheKAMmp4RqNpBmTy-v-zA.jpeg\" class=\"kg-image\" alt=\"A mountain, with a boss on top and a leader half way up, helping many others climb the mountain\"></figure><p>So there we were, üí© hit the fan. Our system wasn‚Äôt scalable, it needed to be rebuilt, a task two guys worked on, gave their üëç and nobody questioned that decision. Why would we? They were senior.<br>Less than two weeks later, servers crashed. They were gone, unresponsive. 10k+ end users who relied on our product were left in the dark.</p><p>A fix was put in place, things went back to ‚Äúnormal‚Äù.</p><p>At this point, more team members realized the company had issues. Discussions, rumours, fear, stress, you name it. It spread like a wildfire from team to team.</p><blockquote>This is when leaders come into play.</blockquote><p>Unless, leaders are overwhelmed as well and try to calm the situation with positive words, but no actions. Repeatedly, employees were told that ‚Äú<em><em>we are in a difficult time, but we have a great team and do everything we can do improve the situation.</em></em>‚Äù</p><blockquote>Walk the walk, don‚Äôt talk the talk</blockquote><p>Talking the talk is easy, nobody needs to be a leader to do that.</p><h3 id=\"great-leaders-however-they-walk-the-walk\">Great leaders, however, they walk the walk</h3><p>Any leader of a business understands that no matter how awesome he or she is, it‚Äôs impossible to make decisions without consulting their team. By <em><em>team</em></em> I mean the people who work with the system on a daily basis, not the others on the management team.</p><p>That did not happen and within weeks, engineers across the organization quit and moved to companies where leaders are leaders, not bosses.</p><h2 id=\"how-to-keep-your-best-employees\">How to keep your best employees</h2><p>So much is to be said about that and so many factors have to be taken into consideration. In the end though, I think it all comes down to valuing your employees. It‚Äôs so simple, yet many companies don‚Äôt get it.</p><h3 id=\"perks-are-perks-they-re-not-a-differentiator-anymore\">Perks are perks, they‚Äôre not a differentiator anymore</h3><p>Perks such as working from home, an in-house barista, business trips, great salaries, a fancy office (definition of ‚Äúfancy‚Äù TBD), free alcohol, catered lunch, etc are not cutting it anymore. Many companies provide that and no matter how often the leadership tries to sell these perks, it is not a differentiator.<br>People who are burned out, repeatedly perform the same tasks day after day, raise awareness and suggest solutions but are not taken seriously, these people will leave. They deserve better and they know it!</p><h3 id=\"employees-don-t-work-for-you-you-work-for-them\">Employees don‚Äôt work for you, you work for them</h3><p>Why? Your regular employee is by far less attached to the company than founders and early-day hires. If you as a leader want your company to succeed, it is your responsibility to enable your team. Get out of your way to make sure your team has everything they need. Help them climb the mountain!</p><h3 id=\"in-short-treat-your-employees-well-that-s-it-\">In short, treat your employees well, that‚Äôs it!</h3><p>Seriously, that‚Äôs it. Listen to them, give them meaningful work and include them in the decision making process. I‚Äôm not saying include 100% of your staff at a 500 people-strong company when you work on the company‚Äôs strategy. What I‚Äôm saying is that decisions are made at every level in your hierarchy, so make sure people are included where it makes most sense.</p><p>By following that advice, you show you trust your teams. Decisions will be made based on what makes sense for the company, not the individual who is in survival mode.</p>","comment_id":"5df63100311b020001459d02","feature_image":"https://assets.mikenikles.com/2019/12/1_Xf-Dgg1tHl4e5WtgdxW8HQ.jpeg","featured":false,"visibility":"public","created_at":"2019-12-15T13:11:28.000+00:00","updated_at":"2019-12-15T13:28:38.000+00:00","published_at":"2016-04-11T13:11:00.000+00:00","custom_excerpt":"Thoughts on why top employees leave their jobs.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df62e46311b020001459ceb","name":"team","slug":"team","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/team/"},{"id":"5df63506311b020001459d62","name":"morale","slug":"morale","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/morale/"}],"authors":[{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"}],"primary_author":{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"},"primary_tag":{"id":"5df62e46311b020001459ceb","name":"team","slug":"team","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/team/"},"url":"https://blog.mikenikles.com/ever-wondered-why-your-best-employees-leave/","excerpt":"Thoughts on why top employees leave their jobs.","reading_time":4,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Ever wondered why your best employees leave?","meta_description":"Thoughts on why top employees leave their jobs."},{"id":"5df62d61311b020001459ce1","uuid":"20020e68-9440-4d00-91fb-62631f3a463e","title":"Code Reviews‚Ää‚Äî‚ÄäA developer‚Äôs #1 priority","slug":"code-reviews-a-developers-1-priority","html":"<p>Photo by <a href=\"https://unsplash.com/@nesabymakers?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">NESA by Makers</a> on <a href=\"https://unsplash.com/s/photos/code-review?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p><p>Plenty of articles have been published <a href=\"https://www.atlassian.com/agile/code-reviews\" rel=\"noopener nofollow\">here</a>, and <a href=\"http://guides.beanstalkapp.com/code-review/guide-to-code-review.html\" rel=\"noopener nofollow\">here</a>, and also <a href=\"http://glen.nu/ramblings/oncodereview.php\" rel=\"noopener nofollow\">here</a> as to why code reviews are great. I‚Äôm not going to repeat that. Instead, I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead.</p><hr><h2 id=\"overview\">Overview</h2><p>Often times, introducing a code review process to a software organization triggers a wide range of emotions among individuals.</p><p>There‚Äôs the ones who‚Äôve had positive experiences in the past. These are your supporters and for the sake of this article, we‚Äôll assume they‚Äôre on board and support the initiative.</p><p>Then, there‚Äôs the ones who‚Äôve either had negative experiences or no experiences at all. Let‚Äôs look at each role individually and see what might go through their mind and how we can implement a code review process that works well.</p><hr><h2 id=\"the-engineer-no-time-i-m-busy-writing-code-\">The engineer: ‚ÄúNo time, I‚Äôm busy writing code‚Äù</h2><h3 id=\"the-situation\">The situation</h3><p>Engineers are busy, very busy bees flying all over the code adding new features, fixing bugs, or taking care of technical debt.</p><h3 id=\"the-assumption\">The assumption</h3><p>Adding yet another task, reviewing someone else‚Äôs code, is simply too much to deal with. More tasks equals to less coding, hence fewer new features and fewer releases. Also, there‚Äôs less time to fix bugs or improve code quality.</p><h3 id=\"the-facts\">The facts</h3><p>When an engineer asks a team member for a code review, what she really asks for is a favour, a favour for someone else to learn about her code. This takes pressure off her shoulders because at least one other team member is able to answer questions or fix bugs related to that code.</p><p>Equally, if not more important though, she‚Äôs asking for another favour, a favour to get feedback on her code, to learn what other approaches might be possible, to improve her skills and become a more experienced developer.</p><p>Over time, this leads to better, more maintainable code that can be worked on by a number of people without the need for a so called ‚Äúknowledge transfer‚Äù. This topic is worth a post in itself‚Ä¶</p><p>The sooner someone‚Äôs code gets reviewed, the sooner that engineer can move on and work on new code, applying what she learned in her last code review and hence, write more solid code. Over time, code reviews will take minimal effort and help everyone to level up.</p><h2 id=\"the-project-manager-we-have-no-time-allocated-for-that-\">The project manager: ‚ÄúWe have no time allocated for that‚Äù</h2><h3 id=\"the-situation-1\">The situation</h3><p>None of the companies I‚Äôm aware of takes code reviews into account when estimating a project‚Äôs total effort.</p><h3 id=\"the-assumption-1\">The assumption</h3><p>Given that situation, it is a PM‚Äôs natural reaction to worry. To develop a feature, we suddenly require at least two engineers, more communication, more context switching and oh boy, there‚Äôs no budget for any of that.</p><h3 id=\"the-facts-1\">The facts</h3><p>As a project manager, there‚Äôs no need to worry. There‚Äôs not even a need to do anything about code reviews.</p><p>A well organized engineering team deals with code reviews so well, a project manager doesn‚Äôt even notice it‚Äôs happening.</p><p>What a project manager does notice in the long term though is the reduced number of bugs, fewer refactoring tasks and smaller technical debt.</p><hr><h2 id=\"how-to-roll-out-code-reviews\">How to roll out code reviews</h2><p>In order to implement a code review process that runs as smooth as butter, a few things have to happen:</p><h3 id=\"1-find-the-code-review-leads-\">1. Find the ‚Äúcode review leads‚Äù</h3><p>Most importantly, code reviews are not a ‚Äúone fits all‚Äù solution. Every company has their own tools and workflows already in place; code reviews are an extension of that.</p><p>What has worked well for me is to find ‚Äúcode review leads‚Äù, a group of engineers from each team. This ensures all varieties of workflows can be taken into account in the next step.</p><h3 id=\"2-define-the-process\">2. Define the process</h3><p>This phase is where the code review leads meet, discuss and document the code review process. What? Why? How?</p><p>Maybe a team or two trials the process and provides feedback before the next step.</p><h3 id=\"3-education\">3. Education</h3><p>It‚Äôs important to educate everyone. This includes engineers, QA and PMs. You could even consider to invite HR so they can update a job description‚Äôs ‚ÄúWhat you‚Äôll be doing‚Äù section and talk to candidates about code reviews.</p><h3 id=\"4-practise-and-refine\">4. Practise and refine</h3><p>Keep a recurring code review leads meeting for a while to check in with the group. If there are problems or new scenarios, discuss it and update the documentation accordingly.</p>","comment_id":"5df62d61311b020001459ce1","feature_image":"https://assets.mikenikles.com/2019/12/nesa-by-makers-kwzWjTnDPLk-unsplash.jpg","featured":true,"visibility":"public","created_at":"2019-12-15T12:56:01.000+00:00","updated_at":"2019-12-15T13:25:47.000+00:00","published_at":"2016-04-10T12:55:00.000+00:00","custom_excerpt":"I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},{"id":"5df62e46311b020001459ceb","name":"team","slug":"team","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/team/"}],"authors":[{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"}],"primary_author":{"id":"1","name":"Mike Nikles","slug":"mike","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/author/mike/"},"primary_tag":{"id":"5df62e46311b020001459cea","name":"development","slug":"development","description":null,"feature_image":null,"visibility":"public","meta_title":null,"meta_description":null,"url":"https://blog.mikenikles.com/tag/development/"},"url":"https://blog.mikenikles.com/code-reviews-a-developers-1-priority/","excerpt":"I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead.","reading_time":3,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Code Reviews‚Ää‚Äî‚ÄäA developer‚Äôs #1 priority","meta_description":"I‚Äôm going to share what I think are reasons engineers and project managers may be opposed to code reviews and why they should embrace it instead."}],"meta":{"pagination":{"page":1,"limit":15,"pages":1,"total":6,"next":null,"prev":null}}}